<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Virtual Threads in Java 19</title>
    <link href="/2022/11/13/virtual-threads-in-java-19/"/>
    <url>/2022/11/13/virtual-threads-in-java-19/</url>
    
    <content type="html"><![CDATA[<p>The Project Loom is an experimental version of the JDK. It extends Java with virtual threads that allow lightweight concurrency. Preview releases are already available and show what is possible.</p><p>Server-side Java applications should be able to process many requests in parallel. The model that is most common in server-side Java programming to date is thread-per-request. A thread is assigned to an incoming request and everything that needs to be done to respond with an appropriate response is processed on this thread. However, this severely limits the maximum number of requests that can be processed concurrently. Because the Java threads, which each claim a native operating system thread, are not lightweights. On the one hand because of the memory requirements: Each individual thread takes up more than one megabyte of memory by default. On the other hand because of the costs for switching between the threads, the context switch.</p><p>As a reaction to these disadvantages, many asynchronous libraries that use CompletableFutures, for example, but also entire “reactive” frameworks, such as e.g. B. RxJava [1], Reactor [2] or Akka Streams [3]. Although they all use the resources far more effectively, they require the developer to switch to a significantly different programming model. Some people moan about the cognitive ballast, as they prefer to sequentially list what the program is supposed to do instead of dealing with callbacks, observables or flows. This raises the question of whether it would not be possible to combine the advantages of both worlds: as effective as asynchronous programming and still being able to program in the usual, sequential command sequence. Oracle’s Project Loom [4] wants to explore exactly this option with a modified JDK. On the one hand, it brings with it a new, lightweight construct for concurrency, namely the virtual threads, and on the other hand a customized standard library that is based on this.</p><h2 id="Virtual-Threads"><a href="#Virtual-Threads" class="headerlink" title="Virtual Threads"></a>Virtual Threads</h2><p>YOu remember multithreading in Java 1.1? At that time, Java only knew so-called green threads. The possibility of using multiple operating system threads was not used at all. Threads were only emulated within the JVM. As of Java 1.2, a native operating system thread was actually started for each Java thread.</p><p>Now the Green Threads are celebrating a revival. Although in a significantly changed, modernized form, virtual threads are basically nothing else: they are threads that are managed within the JVM. However, they are no longer a replacement for the native threads, but a supplement. A relatively small number of native threads is used as a carrier to process an almost arbitrarily large number of virtual threads. The overhead of the virtual threads is so low that the programmer doesn’t have to worry about how many of them he starts.</p><p>In a 64-bit JVM with default settings, a native thread already reserves one megabyte for the stack (the thread stack size, which can also be set explicitly with the <em>-Xss option).</em> There is also some additional metadata. And if memory isn’t the limit, the operating system will stop at a few thousand.</p><p>Listing 1</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// Achtung, kann Rechner einfrieren...</span><br>void excessive<span class="hljs-constructor">Threads()</span>&#123;<br>  ThreadFactory factory = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>builder<span class="hljs-literal">()</span>.factory<span class="hljs-literal">()</span>;<br>  ExecutorService executor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">FixedThreadPool(10000, <span class="hljs-params">factory</span>)</span>;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IntStream</span>.</span></span>range(<span class="hljs-number">0</span>, <span class="hljs-number">10000</span>).<span class="hljs-keyword">for</span><span class="hljs-constructor">Each((<span class="hljs-params">num</span>)</span> -&gt; &#123;<br>    executor.submit(<span class="hljs-literal">()</span> -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>          out.println(num);<br>          <span class="hljs-comment">// Wir warten ein bisschen, damit die Threads wirklich alle gleichzeitig laufen</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10000</span>);<br>        &#125; catch (InterruptedException e) &#123;<br>          e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;<br>      &#125;);<br>    &#125;);<br>  executor.shutdown<span class="hljs-literal">()</span>;<br>  executor.await<span class="hljs-constructor">Termination(Integer.MAX_VALUE, TimeUnit.SECONDS)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The attempt in Listing 1 to start 10,000 threads will bring most computers to their knees (or the JVM to crash). Warning: the program may reach the thread limit of your operating system and your computer could freeze as a result.</p><p>With virtual threads, however, it is no problem to start a whole million threads. Listing 2 runs without problems on the Project Loom JVM!</p><p>Listing 2</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void <span class="hljs-keyword">virtual</span><span class="hljs-constructor">Threads()</span>&#123;<br>  <span class="hljs-comment">// Factory für virtuelle Threads</span><br>  ThreadFactory factory = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>builder<span class="hljs-literal">()</span>.<span class="hljs-keyword">virtual</span><span class="hljs-literal">()</span>.factory<span class="hljs-literal">()</span>;<br>  ExecutorService executor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">FixedThreadPool(1000000, <span class="hljs-params">factory</span>)</span>;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IntStream</span>.</span></span>range(<span class="hljs-number">0</span>, <span class="hljs-number">1000000</span>).<span class="hljs-keyword">for</span><span class="hljs-constructor">Each((<span class="hljs-params">num</span>)</span> -&gt; &#123;<br>    executor.submit(<span class="hljs-literal">()</span> -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        out.println(num);<br>        <span class="hljs-comment">// Thread.sleep schickt hier nur den virtuellen Thread schlafen</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10000</span>);<br>      &#125; catch (InterruptedException e) &#123;<br>        e.print<span class="hljs-constructor">StackTrace()</span>;<br>      &#125;<br>    &#125;);<br>  &#125;);<br>  executor.shutdown<span class="hljs-literal">()</span>;<br>  executor.await<span class="hljs-constructor">Termination(Integer.MAX_VALUE, TimeUnit.SECONDS)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDK-APIs"><a href="#JDK-APIs" class="headerlink" title="JDK APIs"></a>JDK APIs</h2><p>So we could start a million threads at the same time. This may be a nice effect, but its usefulness is still limited. It gets really interesting when all these virtual threads only use the CPU for a short time. Most server-side applications are less CPU-heavy and more I&#x2F;O-heavy. There might be a bit of input validation, but then mostly data is fetched (or written) over the network, for example from the database, or over HTTP from another service.</p><p>In the thread-per-request model with synchronous I&#x2F;O, this results in the thread being blocked for the duration of the I&#x2F;O operation. The operating system recognizes that the thread is waiting for I&#x2F;O, and the scheduler switches directly to the next one. That doesn’t seem too bad at first, since the blocked thread doesn’t use the CPU. However, each switch between threads introduces an overhead. Incidentally, this effect has been exacerbated by modern, complex CPU architectures with multiple cache layers (non-uniform memory access, NUMA).</p><p>The number of context switches should be minimized to actually utilize the CPU effectively. From a CPU point of view, it would be perfect if exactly one thread ran continuously on each core and was never swapped out. We will not usually be able to achieve this state, after all other processes are running on the server in addition to the JVM. But it remains to be said: “A lot helps a lot” does not apply, at least for native threads - you can definitely overdo it here.</p><p>In order to be able to execute many parallel requests with few native threads, the virtual thread introduced in Project Loom voluntarily relinquishes control when waiting for I&#x2F;O and pausing. However, this does not block the underlying native thread, which executes the virtual thread as a worker. Rather, the virtual thread signals that it can’t do anything right now, while the native thread can grab the next virtual thread without CPU context switching. But how do you do that without using asynchronous I&#x2F;O APIs? After all, Project Loom has made it its mission to protect programmers from the callback desert.</p><p>This shows the advantage of providing the new functionality in the form of a new JDK version. A third-party library for a currently current JDK relies on using an asynchronous programming model. Instead, Project Loom comes with a customized standard library. Many I&#x2F;O libraries have been rewritten so that they now use virtual threads internally (box: “Changed standard libraries”). A usual network call is - without any change in the program code - suddenly no longer blocking I&#x2F;O. Only the virtual thread is paused. With this trick, existing programs also benefit from the virtual threads without the need for adjustments.</p><h2 id="Changed-standard-libraries"><a href="#Changed-standard-libraries" class="headerlink" title="Changed standard libraries"></a>Changed standard libraries</h2><p>The following classes have been adjusted so that blocking calls in them no longer block the native thread, only the virtual thread.</p><ul><li><p>java.net.Socket</p></li><li><p>java.net.ServerSocket</p></li><li><p>java.net.DatagramSocket&#x2F;MulticastSocket</p></li><li><p>java.nio.channels.SocketChannel</p></li><li><p>java.nio.channels.ServerSocketChannel</p></li><li><p>java.nio.channels.DatagramChannel</p></li><li><p>java.nio.channels.Pipe.SourceChannel</p></li><li><p>java.nio.channels.Pipe.SinkChannel</p></li><li><p>java.net.InetAddress</p></li></ul><h2 id="Continuations"><a href="#Continuations" class="headerlink" title="Continuations"></a>Continuations</h2><p>The concept that forms the basis for the implementation of the virtual threads is called Delimited Continuations. Most of you will probably have used a debugger at some point. To do this, set a breakpoint in the code. When this point is reached, execution is halted and the current state of the program is displayed in the debugger. It would now be conceivable to freeze this state. This is the basic idea of continuation: stop at a point in the flow, take the state (of the current thread, i.e. the call stack, the current position in the code, etc.) and convert it into a function that “do-there- continue-where-you-left-off function”. This can then be called up at a later point in time and the process started can be resumed. Exactly what is needed for the virtual threads:</p><p>Continuations also have their place outside of virtual threads and are a powerful construct for influencing the flow of a program at will. Project Loom provides an API for working with continuations. For application development it should not be necessary to work with it directly. It is primarily the low-level construct that makes virtual threads possible. However, if you want to experiment with it, you can do so (Listing 3).</p><p>Listing 3</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-literal">void</span> continuationDemo() &#123;<br>  <span class="hljs-regexp">// Der scope ist ein Hilfsmittel, um geschachtelte Continuations zu   //</span> ermöglichen.<br>  ContinuationScope scope = <span class="hljs-keyword">new</span> ContinuationScope(<span class="hljs-string">&quot;demo&quot;</span>);<br>  Continuation a = <span class="hljs-keyword">new</span> Continuation<span class="hljs-function"><span class="hljs-params">(scope, () -&gt; &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">    out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;To be&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-regexp">// hier wird die Funktion eingefroren und gibt die Kontrolle an den     //</span> Aufrufer.</span></span><br><span class="hljs-params"><span class="hljs-function">    Continuation.<span class="hljs-keyword">yield</span>(scope);</span></span><br><span class="hljs-params"><span class="hljs-function">    out.println(<span class="hljs-string">&quot;continued!&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">  &#125;)</span>;</span><br><span class="hljs-function">  <span class="hljs-title">a</span>.<span class="hljs-title">run</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">  <span class="hljs-title">out</span>.<span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot; ... &quot;</span>)</span>;</span><br><span class="hljs-function">  // <span class="hljs-title">die</span> <span class="hljs-title">Continuation</span> <span class="hljs-title">kann</span> <span class="hljs-title">von</span> <span class="hljs-title">dort</span>, <span class="hljs-title">wo</span> <span class="hljs-title">sie</span> <span class="hljs-title">angehalten</span> <span class="hljs-title">wurde</span>, <span class="hljs-title">fortgesetzt</span>   // <span class="hljs-title">werden</span>.</span><br><span class="hljs-function">  <span class="hljs-title">a</span>.<span class="hljs-title">run</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">  // ...</span><br><span class="hljs-function">  &#125;</span><br></code></pre></td></tr></table></figure><p>By the way, virtual threads are a form of cooperative multitasking. Native threads are stripped of CPU by the operating system regardless of what they are doing (preemptive multitasking). Even an endless loop will not block the CPU core, but others will still have their turn. However, at the virtual thread level, there is no such scheduler - the virtual thread itself must return control to the native thread.</p><h2 id="Not-yet-in-the-package-tail-call-elimination"><a href="#Not-yet-in-the-package-tail-call-elimination" class="headerlink" title="Not yet in the package: tail-call elimination"></a>Not yet in the package: tail-call elimination</h2><p>For the sake of completeness, it should be mentioned that among the features to be implemented in Project Loom is the optimization of tail recursion. When a recursive function calls itself as the last action, the compiler can turn it into a nonrecursive loop. This is already happening in some languages other than Java. On the JVM, Scala, Kotlin (with <em>tailrec</em> ) or Clojure (with <em>recur</em> ) support this tail call elimination.</p><p>Project Loom also wants to introduce a directive that directs the compiler to this optimization, which makes the use of many recursive algorithms possible in the first place. However, this is not yet included in the current previews. It’s not even specified yet what it should look like.</p><h2 id="Beyond-virtual-threads"><a href="#Beyond-virtual-threads" class="headerlink" title="Beyond virtual threads"></a>Beyond virtual threads</h2><p>The problems with threads described at the beginning relate solely to efficiency. A completely different challenge has not yet been considered: communication between threads. Programming with the current Java mechanisms is not very easy and is therefore error-prone. Threads communicate via shared variables (shared mutable state). In order to avoid race conditions, these must be replaced by _synchronized_or explicit locks are protected. If errors occur here, they are particularly difficult to find due to the non-determinism at runtime. And even when done right, these locks often represent a point of contention, a bottleneck in execution. Because potentially many will then have to wait for exactly the one who is currently using the lock.</p><p>There are certainly alternative models. In the context of virtual threads, channels should be mentioned here in particular. Kotlin and Clojure (box: “What are the others doing?”) offer this as the preferred communication model for their coroutines. Instead of a shared, changeable state, they rely on immutable messages that are written (preferably asynchronously) into a channel and from there picked up by the receiver. However, it is still open whether channels will become part of Project Loom.</p><h2 id="What-are-the-others-doing"><a href="#What-are-the-others-doing" class="headerlink" title="What are the others doing?"></a>What are the others doing?</h2><p>The virtual threads may be new to Java, but they are not new to the JVM. If you know Clojure or Kotlin, you probably feel reminded of Coroutines. In fact, they are technically very similar to these and solve the same problem. However, there is at least one small but interesting difference from a developer’s perspective: there are special keywords for coroutines in the respective languages. In Clojure, a macro for a Go block, in Kotlin, the suspend keyword.</p><p>The virtual threads in Loom do not require any additional syntax. The same method can be run unmodified from a virtual thread, or directly from a native thread.</p><p>However, it may not be necessary for Project Loom to solve all problems - any gaps will surely be filled by new third-party libraries that offer solutions at a higher level of abstraction based on the virtual threads. The Fibry experiment [5], for example, is an actuator library for Loom (box: “Wasn’t there something about fibers?”).</p><h2 id="Wasn’t-there-something-about-Fibers"><a href="#Wasn’t-there-something-about-Fibers" class="headerlink" title="Wasn’t there something about Fibers?"></a>Wasn’t there something about Fibers?</h2><p>Anyone who has heard of Project Loom before knows the term fibers. Together with the thread (thread), this probably also led to the project name, because Loom means loom. In the early versions of Project Loom, Fiber was the name for the virtual thread. It goes back to a previous project of current Loom project leader Ron Pressler, the Quasar Fibers [6]. However, the name Fiber, like the alternative coroutine, was discarded at the end of 2019, and Virtual Thread prevailed.</p><h2 id="The-unique-selling-proposition-of-Project-Loom"><a href="#The-unique-selling-proposition-of-Project-Loom" class="headerlink" title="The unique selling proposition of Project Loom"></a>The unique selling proposition of Project Loom</h2><p>Basically, there is already an established solution for the problem that Project Loom solves: Asynchronous I&#x2F;O, either through callbacks or through “reactive” frameworks. However, using these means adopting a different programming model. Not all developers find it easy to switch to an asynchronous mindset. There is also a partial lack of support in common libraries - everything that stores data in ThreadLocal is suddenly unusable. And in tooling: Debugging asynchronous code often results in several aha moments. Also in the sense that the code to be examined is not executed on the thread that you are currently single-stepping through with the debugger.</p><p>The special appeal of Project Loom is that it makes the changes at the JDK level, so the program code can remain unchanged. A currently inefficient program that consumes a native thread for each HTTP connection could run unchanged on the Project Loom JDK and would suddenly be efficient and scalable (Box: “When will virtual threads be available for everyone?”). Thanks to the modified java.net library, now based on virtual threads.</p><h2 id="When-are-virtual-threads-coming-for-everyone"><a href="#When-are-virtual-threads-coming-for-everyone" class="headerlink" title="When are virtual threads coming for everyone?"></a>When are virtual threads coming for everyone?</h2><p>Project Loom keeps a low profile when it comes to the question of which Java release the features should be included in. At the moment everything is still experimental and APIs are subject to change. In JDK 15 you probably shouldn’t expect that yet.</p><p>If you want to try it out, you can either check out the source code from GitHub [7] and build the JDK yourself, or download ready-made preview releases [8].</p><p><img src="https://s3.eu-west-1.amazonaws.com/redsys-prod/articles/7049438b39cdcf98a347c687/images/huehnken_lutz_sw.tif_fmt1.jpg" alt="huehnken_lutz_sw.tif_fmt1.jpg">Lutz Hühnken is Chief Solutions Architect at the Hamburg Süd shipping company. He is currently primarily involved with events-first microservices, domain-driven design, event storming and reactive systems.</p><p><a href="https://twitter.com/lutzhuehnken"><img src="https://s3.eu-west-1.amazonaws.com/redsys-prod/articles/7049438b39cdcf98a347c687/images/SoMe-Twitter.png" alt="Twitter"></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>What&#39;s new in Java 17</title>
    <link href="/2022/11/13/what_is_new_in_java_17/"/>
    <url>/2022/11/13/what_is_new_in_java_17/</url>
    
    <content type="html"><![CDATA[<p><img src="https://res.infoq.com/articles/why-how-upgrade-java17/en/headerimage/upgrade-to-java-16-or-17-header-image-1630333858357.jpg" alt="java17"></p><p>On September 14, 2021 the time had finally come: After the five “intermediate versions” Java 12 to 15, each of which was only maintained for half a year, the current long-term support (LTS) release, Java 17, was released.</p><p>Oracle will provide free upgrades for Java 17 for at least five years, i.e. until September 2026 - and extended, paid support until September 2029.</p><p>In Java 17, 14 JDK enhancement proposals were implemented. I sorted the changes by relevance to day-to-day programming work. The article begins with language enhancements and changes to the module system. Various extensions of the JDK class library follow, performance improvements, new preview and incubator features, deprecations and deletions and finally other changes that are rarely encountered in day-to-day work.</p><p>As always, I have used the English names of the JEPs and other changes. A translation into German would not bring any added value here.</p><h2 id="Sealed-Classes"><a href="#Sealed-Classes" class="headerlink" title="Sealed Classes"></a>Sealed Classes</h2><p>The big innovation in Java 17 (besides long-term support) are sealed classes and interfaces.</p><p>What sealed classes are, exactly how they work and why we need them, I will explain in a separate article due to the scope of the topic: <a href="https://www.happycoders.eu/de/java/sealed-classes-de/">Sealed Classes in Java</a></p><p><em>(Sealed classes were first introduced in <a href="https://www.happycoders.eu/de/java/java-15-features-de/#Sealed_Classes_Preview">Java 15</a> as a preview feature. Three small changes were released in <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Sealed_Classes_Second_Preview">Java 16.</a> <a href="https://openjdk.org/jeps/409">JDK Enhancement Proposal 409</a> declares sealed classes production-ready in Java 17 with no further changes.)</em></p><h2 id="Strongly-Encapsulate-JDK-Internals"><a href="#Strongly-Encapsulate-JDK-Internals" class="headerlink" title="Strongly Encapsulate JDK Internals"></a>Strongly Encapsulate JDK Internals</h2><p>The module system ( <a href="https://openjdk.org/projects/jigsaw/">Project Jigsaw</a> ) was introduced in Java 9, in particular to be able to better modularize code and to increase the security of the Java platform.</p><h3 id="Before-Java-16-Relaxed-Strong-Encapsulation"><a href="#Before-Java-16-Relaxed-Strong-Encapsulation" class="headerlink" title="Before Java 16: Relaxed Strong Encapsulation"></a>Before Java 16: Relaxed Strong Encapsulation</h3><p>Up until Java 16, this had little impact on existing code, as the JDK developers provided “Relaxed Strong Encapsulation” mode for a transitional period.</p><p>This allowed non-public classes and methods of packages in the JDK class library that existed before Java 9 to be accessed via deep reflection without changing the configuration.</p><p>The following example extracts the bytes of a string by reading its private field <code>value</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EncapsulationTest</span> &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>) throws ReflectiveOperationException</span> &#123;<br>    <span class="hljs-built_in">byte</span>[] <span class="hljs-keyword">value</span> = getValue(<span class="hljs-string">&quot;Happy Coding!&quot;</span>);<br>    System.<span class="hljs-keyword">out</span>.println(Arrays.toString(<span class="hljs-keyword">value</span>));<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">getValue</span>(<span class="hljs-params">String <span class="hljs-built_in">string</span></span>) throws ReflectiveOperationException</span> &#123;<br>    Field VALUE = String.<span class="hljs-keyword">class</span>.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>);<br>    VALUE.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">byte</span>[]) VALUE.<span class="hljs-keyword">get</span>(<span class="hljs-built_in">string</span>);<br>  &#125;<br>&#125;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>If we call this program with Java 9 to 15, we get the following output:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ java EncapsulationTest.java<br><span class="hljs-symbol">WARNING: </span>An illegal reflective access operation has occurred<br><span class="hljs-symbol">WARNING: </span>Illegal reflective access by EncapsulationTest (file:/.../EncapsulationTest.java) to field java.lang.String.value<br><span class="hljs-symbol">WARNING: </span>Please consider reporting this to the maintainers of EncapsulationTest<br><span class="hljs-symbol">WARNING: </span>Use --illegal-access=warn to enable warnings of further illegal reflective access operations<br><span class="hljs-symbol">WARNING: </span>All illegal access operations will be denied in a future release<br><span class="hljs-meta">[72, 97, 112, 112, 121, 32, 67, 111, 100, 105, 110, 103, 33]</span><br>Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>We see some warnings, but then we get the desired bytes.</p><p>Deep reflection on <em>new</em> packages, on the other hand, was not allowed by default and had to be explicitly allowed on the command line with “–add-opens” since the introduction of the module system.</p><p>The following example tries to instantiate the class <code>ConstantDescs</code>from the package added in Java 12 (i.e. after the introduction of the module system) <code>java.lang.constant</code>via its private constructor:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Constructor</span>&lt;<span class="hljs-title function_">ConstantDescs</span>&gt; <span class="hljs-title function_">constructor</span> = <span class="hljs-title function_">ConstantDescs</span>.<span class="hljs-title function_">class</span>.<span class="hljs-title function_">getDeclaredConstructor</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">constructor</span>.setAccessible(<span class="hljs-keyword">true</span>)<span class="hljs-punctuation">;</span><br>ConstantDescs constantDescs = <span class="hljs-keyword">constructor</span>.newInstance()<span class="hljs-punctuation">;</span><br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>The program aborts with the following error message:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ java ConstantDescsTest<span class="hljs-selector-class">.java</span><br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.InaccessibleObjectException</span>: Unable to make private java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.constant</span><span class="hljs-selector-class">.ConstantDescs</span>() accessible: module java<span class="hljs-selector-class">.base</span> does not <span class="hljs-string">&quot;opens java.lang.constant&quot;</span> to unnamed module @<span class="hljs-number">6</span>c3f5566<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.AccessibleObject</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(AccessibleObject<span class="hljs-selector-class">.java</span>:<span class="hljs-number">361</span>)<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.AccessibleObject</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(AccessibleObject<span class="hljs-selector-class">.java</span>:<span class="hljs-number">301</span>)<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Constructor</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(Constructor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">189</span>)<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Constructor</span><span class="hljs-selector-class">.setAccessible</span>(Constructor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">182</span>)<br>        at ConstantDescsTest<span class="hljs-selector-class">.main</span>(ConstantDescsTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">7</span>)<br>Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>In order to make the program runnable, we need to <code>--add-opens</code>open via the new package for Deep Reflection:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">java </span>--<span class="hljs-keyword">add-opens </span><span class="hljs-keyword">java.base/java.lang.constant=ALL-UNNAMED </span>ConstantDescsTest.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>The code then runs error-free and without warnings.</p><h3 id="Since-Java-16-Default-Strong-Encapsulation-Optional-Relaxed-Strong-Encapsulation"><a href="#Since-Java-16-Default-Strong-Encapsulation-Optional-Relaxed-Strong-Encapsulation" class="headerlink" title="Since Java 16: Default Strong Encapsulation + Optional Relaxed Strong Encapsulation"></a>Since Java 16: Default Strong Encapsulation + Optional Relaxed Strong Encapsulation</h3><p>In <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Strongly_Encapsulate_JDK_Internals_by_Default">Java 16</a> , the default mode was changed from “Relaxed Strong Encapsulation” to “Strong Encapsulation”. Since then, access to pre-Java 9 packages has also had to be explicitly allowed.</p><p>If we run the first example on Java 16 without explicitly allowing access, we get the following error message:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ java EncapsulationTest<span class="hljs-selector-class">.java</span><br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.InaccessibleObjectException</span>: Unable to make field private final byte<span class="hljs-selector-attr">[]</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.String</span><span class="hljs-selector-class">.value</span> accessible: module java<span class="hljs-selector-class">.base</span> does not <span class="hljs-string">&quot;opens java.lang&quot;</span> to unnamed module @<span class="hljs-number">62</span>fdb4a6<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.AccessibleObject</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(AccessibleObject<span class="hljs-selector-class">.java</span>:<span class="hljs-number">357</span>)<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.AccessibleObject</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(AccessibleObject<span class="hljs-selector-class">.java</span>:<span class="hljs-number">297</span>)<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Field</span><span class="hljs-selector-class">.checkCanSetAccessible</span>(Field<span class="hljs-selector-class">.java</span>:<span class="hljs-number">177</span>)<br>        at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Field</span><span class="hljs-selector-class">.setAccessible</span>(Field<span class="hljs-selector-class">.java</span>:<span class="hljs-number">171</span>)<br>        at EncapsulationTest<span class="hljs-selector-class">.getValue</span>(EncapsulationTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">12</span>)<br>        at EncapsulationTest<span class="hljs-selector-class">.main</span>(EncapsulationTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">6</span>)<br>Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>However, Java 16 offered a workaround: You <code>--illegal-access=permit</code>could switch back to “Relaxed Strong Encapsulation” using the VM option:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">$ java --illegal-access=permit EncapsulationTest.java<br>Java HotSpot(TM) 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.<br><span class="hljs-symbol">WARNING: </span>An illegal reflective access operation has occurred<br><span class="hljs-symbol">WARNING: </span>Illegal reflective access by EncapsulationTest (file:/.../EncapsulationTest.java) to field java.lang.String.value<br><span class="hljs-symbol">WARNING: </span>Please consider reporting this to the maintainers of EncapsulationTest<br><span class="hljs-symbol">WARNING: </span>Use --illegal-access=warn to enable warnings of further illegal reflective access operations<br><span class="hljs-symbol">WARNING: </span>All illegal access operations will be denied in a future release<br><span class="hljs-meta">[72, 97, 112, 112, 121, 32, 67, 111, 100, 105, 110, 103, 33]</span><br>Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><h3 id="Since-Java-17-Strong-encapsulation-only"><a href="#Since-Java-17-Strong-encapsulation-only" class="headerlink" title="Since Java 17: Strong encapsulation only"></a>Since Java 17: Strong encapsulation only</h3><p>Per <a href="https://openjdk.org/jeps/403">JDK Enhancement Proposal 403</a> , this option will be removed from Java 17. The VM option <code>--illegal-access</code>has been warned and inaccessible by <code>String.value</code>default:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">java --illegal-access=permit <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EncapsulationTest</span>.</span></span>java<br>OpenJDK <span class="hljs-number">64</span>-Bit Server VM warning: Ignoring option --illegal-access=permit; support was removed <span class="hljs-keyword">in</span> <span class="hljs-number">17.0</span><br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java.lang.reflect.InaccessibleObjectException: Unable <span class="hljs-keyword">to</span> make field <span class="hljs-keyword">private</span> final byte<span class="hljs-literal">[]</span> java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value accessible: <span class="hljs-keyword">module</span> java.base does not <span class="hljs-string">&quot;opens java.lang&quot;</span> <span class="hljs-keyword">to</span> unnamed <span class="hljs-keyword">module</span> @<span class="hljs-number">3e77</span>a1ed<br>        at java.base/java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AccessibleObject</span>.</span></span>check<span class="hljs-constructor">CanSetAccessible(AccessibleObject.<span class="hljs-params">java</span>:354)</span><br>        at java.base/java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AccessibleObject</span>.</span></span>check<span class="hljs-constructor">CanSetAccessible(AccessibleObject.<span class="hljs-params">java</span>:297)</span><br>        at java.base/java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Field</span>.</span></span>check<span class="hljs-constructor">CanSetAccessible(Field.<span class="hljs-params">java</span>:178)</span><br>        at java.base/java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Field</span>.</span></span>set<span class="hljs-constructor">Accessible(Field.<span class="hljs-params">java</span>:172)</span><br>        at <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EncapsulationTest</span>.</span></span>get<span class="hljs-constructor">Value(EncapsulationTest.<span class="hljs-params">java</span>:12)</span><br>        at <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EncapsulationTest</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EncapsulationTest</span>.</span></span>java:<span class="hljs-number">6</span>)<br>Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>If you want to use Deep Reflection from Java 17, you must now explicitly <code>--add-opens</code>allow it:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">java </span>--<span class="hljs-keyword">add-opens </span><span class="hljs-keyword">java.base/java.lang=ALL-UNNAMED </span>EncapsulationTest.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>[<span class="hljs-number">72</span>, <span class="hljs-number">97</span>, <span class="hljs-number">112</span>, <span class="hljs-number">112</span>, <span class="hljs-number">121</span>, <span class="hljs-number">32</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">33</span>]<br>Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>The program is running and we no longer see any warnings - the long transition phase since Java 9 has thus been completed.</p><h2 id="Add-java-time-InstantSource"><a href="#Add-java-time-InstantSource" class="headerlink" title="Add java.time.InstantSource"></a>Add java.time.InstantSource</h2><p>The class <code>java.time.Clock</code>is extremely useful for writing tests that verify time-dependent functionality.</p><p>if <code>Clock</code>e.g. B. is injected into the application classes via dependency injection, you can mock them in tests or <code>Clock.fixed()</code>set a fixed time for the test execution.</p><p>Since <code>Clock</code>the method <code>getZone()</code>provides, you always have to think about which specific time zone you <code>Clock</code>instantiate an object with.</p><p>In order to enable alternative, time zone-independent time sources, the interface <code>java.time.InstantSource</code>from was <code>Clock</code>extracted in Java 17, which only provides the methods <code>instant()</code>and for querying the time, which is already implemented as a default method.<code>millis()``millis()</code></p><p>The <code>Timer</code>class in the following example uses <code>InstantSource</code>to determine the start and end times of an <code>Runnable</code>execution and calculate the duration of the execution from that:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">public class Timer &#123;<br>  private final <span class="hljs-keyword">InstantSource </span><span class="hljs-keyword">instantSource;</span><br><span class="hljs-keyword"></span><br>  public Timer(<span class="hljs-keyword">InstantSource </span><span class="hljs-keyword">instantSource) </span>&#123;<br>    this.<span class="hljs-keyword">instantSource </span>= <span class="hljs-keyword">instantSource;</span><br><span class="hljs-keyword"></span>  &#125;<br><br>  public Duration measure(Runnable runnable) &#123;<br>    <span class="hljs-keyword">Instant </span>start = <span class="hljs-keyword">instantSource.instant();</span><br><span class="hljs-keyword"></span>    runnable.run();<br>    <span class="hljs-keyword">Instant </span>end = <span class="hljs-keyword">instantSource.instant();</span><br><span class="hljs-keyword"></span>    return Duration.<span class="hljs-keyword">between(start, </span>end);<br>  &#125;<br>&#125;<br>Code language:  <span class="hljs-keyword">Java </span> ( <span class="hljs-keyword">java </span>)<br></code></pre></td></tr></table></figure><p>In production we can <code>Timer</code>instantiate using the system clock (although in the absence of alternative implementations we have to <code>InstantSource</code>worry about the timezone - we’ll use the system’s default timezone):</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Timer timer = new Timer(<span class="hljs-keyword">Clock.systemDefaultZone());Code </span>language:  <span class="hljs-keyword">Java </span> ( <span class="hljs-keyword">java </span>)<br></code></pre></td></tr></table></figure><p>We can test the <code>measure()</code>method by <code>InstantSource</code>mocking its <code>instant()</code>method to return two fixed values and comparing the return value of <code>measure()</code>with the difference between these values:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>void should<span class="hljs-constructor">ReturnDurationBetweenStartAndEnd()</span> &#123;<br>  InstantSource instantSource = mock(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantSource</span>.</span></span><span class="hljs-keyword">class</span>);<br>  <span class="hljs-keyword">when</span>(instantSource.instant<span class="hljs-literal">()</span>)<br>      .<span class="hljs-keyword">then</span><span class="hljs-constructor">Return(Instant.<span class="hljs-params">ofEpochMilli</span>(1_640_033_566_000L)</span>)<br>      .<span class="hljs-keyword">then</span><span class="hljs-constructor">Return(Instant.<span class="hljs-params">ofEpochMilli</span>(1_640_033_567_750L)</span>);<br><br>  Timer timer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Timer(<span class="hljs-params">instantSource</span>)</span>;<br>  Duration duration = timer.measure(<span class="hljs-literal">()</span> -&gt; &#123;&#125;);<br><br>  <span class="hljs-keyword">assert</span><span class="hljs-constructor">That(<span class="hljs-params">duration</span>, <span class="hljs-params">is</span>(Duration.<span class="hljs-params">ofMillis</span>(1_750)</span>));<br>&#125;Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p><em>There is no JDK Enhancement Proposal for this extension.</em></p><h2 id="Hex-Formatting-and-Parsing-Utility"><a href="#Hex-Formatting-and-Parsing-Utility" class="headerlink" title="Hex Formatting and Parsing Utility"></a>Hex Formatting and Parsing Utility</h2><p>Until now, we could use – or use – the <code>toHexString()</code>method of the classes <code>Integer</code>, <code>Long</code>, <code>Float</code>and to output hexadecimal numbers . The following code shows a few examples:<code>Double``String.format()</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(1_000)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Long</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(100_000_000_000L)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Float</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(3.14F)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Double</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(3.14159265359)</span>);<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<br>    <span class="hljs-string">&quot;%x - %x - %a - %a&quot;</span>.formatted(<span class="hljs-number">1_000</span>, <span class="hljs-number">100_000_000_000L</span>, <span class="hljs-number">3.14</span>F, <span class="hljs-number">3.14159265359</span>));Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>The code results in the following output:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3e8</span><br><span class="hljs-attribute">174876e800</span><br><span class="hljs-attribute">0x1</span>.<span class="hljs-number">91</span>eb86p1<br><span class="hljs-attribute">0x1</span>.<span class="hljs-number">921</span>fb54442eeap1<br><span class="hljs-attribute">3e8</span> - <span class="hljs-number">174876</span>e800 - <span class="hljs-number">0</span>x1.<span class="hljs-number">91</span>eb86p1 - <span class="hljs-number">0</span>x1.<span class="hljs-number">921</span>fb54442eeap1Code language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>We could parse hexadecimal numbers with the respective counterparts:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;3e8&quot;</span>, 16)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Long</span>.</span></span>parse<span class="hljs-constructor">Long(<span class="hljs-string">&quot;174876e800&quot;</span>, 16)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Float</span>.</span></span>parse<span class="hljs-constructor">Float(<span class="hljs-string">&quot;0x1.91eb86p1&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Double</span>.</span></span>parse<span class="hljs-constructor">Double(<span class="hljs-string">&quot;0x1.921fb54442eeap1&quot;</span>)</span>;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>Java 17 provides the new class <code>java.util.HexFormat</code>that is used to represent and parse hexadecimal numbers via a unified API. <code>HexFormat</code>supports all primitive integers ( <code>int</code>, <code>byte</code>, <code>char</code>, <code>long</code>, <code>short</code>) and <code>byte</code>arrays – but no floating point numbers.</p><p>Here is an example of the conversion to hexadecimal numbers:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">HexFormat hexFormat = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HexFormat</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-literal">()</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hexFormat.<span class="hljs-keyword">to</span><span class="hljs-constructor">HexDigits(&#x27;A&#x27;)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hexFormat.<span class="hljs-keyword">to</span><span class="hljs-constructor">HexDigits((<span class="hljs-params">byte</span>)</span> <span class="hljs-number">10</span>));<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hexFormat.<span class="hljs-keyword">to</span><span class="hljs-constructor">HexDigits((<span class="hljs-params">short</span>)</span> <span class="hljs-number">1_000</span>));<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hexFormat.<span class="hljs-keyword">to</span><span class="hljs-constructor">HexDigits(1_000_000)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hexFormat.<span class="hljs-keyword">to</span><span class="hljs-constructor">HexDigits(100_000_000_000L)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hexFormat.format<span class="hljs-constructor">Hex(<span class="hljs-params">new</span> <span class="hljs-params">byte</span>[] &#123;1, 2, 3, 60, 126, -1&#125;)</span>);Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>The output is:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">0041</span><br><span class="hljs-string">0a</span><br><span class="hljs-number">03e8</span><br><span class="hljs-string">000f4240</span><br><span class="hljs-number">000000174876e800</span><br><span class="hljs-attr">0102033c7effCode language:</span>  <span class="hljs-string">Plaintext</span>  <span class="hljs-string">(</span> <span class="hljs-string">plaintext</span> <span class="hljs-string">)</span><br></code></pre></td></tr></table></figure><p>It is noticeable that the output always comes with leading zeros.</p><p>The representation we can z. B. adjust as follows:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">HexFormat hexFormat = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HexFormat</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot; &quot;</span>)</span>.<span class="hljs-keyword">with</span><span class="hljs-constructor">Prefix(<span class="hljs-string">&quot;0x&quot;</span>)</span>.<span class="hljs-keyword">with</span><span class="hljs-constructor">UpperCase()</span>;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><ul><li><code>ofDelimiter()</code>Specifies a delimiter for formatting byte arrays.</li><li><code>withPrefix()</code>defines a prefix – but only for byte arrays!</li><li><code>withUpperCase()</code>switches the output to uppercase.</li></ul><p>The output is now:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0041</span><br><span class="hljs-attribute">0A</span><br><span class="hljs-attribute">03E8</span><br><span class="hljs-attribute">000F4240</span><br><span class="hljs-attribute">000000174876E800</span><br><span class="hljs-attribute">0x01</span> <span class="hljs-number">0</span>x02 <span class="hljs-number">0</span>x03 <span class="hljs-number">0</span>x3C <span class="hljs-number">0</span>x7E <span class="hljs-number">0</span>xFFCode language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>The leading zeros cannot be removed.</p><p>We can parse integers as follows:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> i = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HexFormat</span>.</span></span>from<span class="hljs-constructor">HexDigits(<span class="hljs-string">&quot;F4240&quot;</span>)</span>;<br>long l = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HexFormat</span>.</span></span>from<span class="hljs-constructor">HexDigitsToLong(<span class="hljs-string">&quot;174876E800&quot;</span>)</span>;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>Corresponding methods for <code>char</code>, <code>byte</code>and <code>short</code>do not exist.</p><p>We can parse byte arrays e.g. B. as follows:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">HexFormat hexFormat = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HexFormat</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Delimiter(<span class="hljs-string">&quot; &quot;</span>)</span>.<span class="hljs-keyword">with</span><span class="hljs-constructor">Prefix(<span class="hljs-string">&quot;0x&quot;</span>)</span>.<span class="hljs-keyword">with</span><span class="hljs-constructor">UpperCase()</span>;<br>byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = hexFormat.parse<span class="hljs-constructor">Hex(<span class="hljs-string">&quot;0x01 0x02 0x03 0x3C 0x7E 0xFF&quot;</span>)</span>;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>There are other methods to B. to parse only a substring. <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/HexFormat.html">See the HexFormat JavaDoc for</a> full documentation .</p><p><em>There is no JDK Enhancement Proposal for this extension.</em></p><h2 id="Context-Specific-Deserialization-Filters"><a href="#Context-Specific-Deserialization-Filters" class="headerlink" title="Context-Specific Deserialization Filters"></a>Context-Specific Deserialization Filters</h2><p>Object deserialization poses a significant security risk. Malicious attackers can use the data stream to be deserialized to construct objects, through which they can ultimately execute arbitrary code in arbitrary classes (available on the classpath).</p><p>Java 9 introduced deserialization filters, the ability to specify which classes may (or may not) be deserialized.</p><p>Previously there were two ways to define deserialization filters:</p><ul><li>per <code>ObjectInputStream.setObjectInputFilter()</code>for each deserialization separately,</li><li>system-wide uniformly via system property <code>jdk.serialFilter</code>or via security property of the same name in the file <code>conf/security/java.properties</code>.</li></ul><p>For complex applications, especially those with third-party libraries that also contain deserialization code, these variants are not satisfactory. For example, deserialization in third-party code cannot be <code>ObjectInputStream.setObjectInputFilter()</code>configured via (unless you change their source code), but only globally.</p><p><a href="https://openjdk.org/jeps/415">As of Java 17, JDK Enhancement Proposal 415</a> makes it possible to set context-specific deserialization filters, e.g. B. for a specific thread or based on the call stack for a specific class, module, or third-party library.</p><p>The configuration of the filters is not easy and would go beyond the scope of this article. Details can be found in the JEP linked above.</p><h3 id="JDK-Flight-Recorder-Event-for-Deserialization"><a href="#JDK-Flight-Recorder-Event-for-Deserialization" class="headerlink" title="JDK Flight Recorder Event for Deserialization"></a>JDK Flight Recorder Event for Deserialization</h3><p>As of Java 17 it is also possible to monitor the deserialization of objects via the JDK Flight Recorder (JFR).</p><p>Deserialization events are disabled by default and must be enabled via the event identifier <code>jdk.Deserialization</code>in the JFR configuration file (see the article linked below for an example).</p><p>If a deserialization filter is activated, the JFR event contains an indication of whether the deserialization was executed or rejected.</p><p>For more detailed information and an example, see the article “ <a href="https://inside.java/2021/03/02/monitoring-deserialization-activity-in-the-jdk/">Monitoring Deserialization to Improve Application Security</a> “.</p><p><em>The Flight Recorder events for the deserialization are not part of the above JDK Enhancement Proposal; there is also no separate JEP for them.</em></p><h2 id="Enhanced-Pseudo-Random-Number-Generators"><a href="#Enhanced-Pseudo-Random-Number-Generators" class="headerlink" title="Enhanced Pseudo-Random Number Generators"></a>Enhanced Pseudo-Random Number Generators</h2><p>Until now, it has been tedious to replace the <a href="https://www.happycoders.eu/de/java/zufallszahl/">random number-generating</a> classes <code>Random</code>and <code>SplittableRandom</code>in an application (or even to replace them with other algorithms) even though they offer a largely identical set of methods (e.g. <code>nextInt()</code>, <code>nextDouble()</code>and stream-generating methods such as <code>ints()</code>and <code>longs()</code>).</p><p>So far, the class hierarchy looked like this:</p><p><img src="https://www.happycoders.eu/wp-content/uploads/2021/12/random_number_generators_pre_java17-600x249.png" alt="Pre-Java 17 Pseudo-Random Number Generators"></p><p>Pre-Java 17 Pseudo-Random Number Generators</p><p>JDK <a href="https://openjdk.org/jeps/356">Enhancement Proposal 356</a> introduced a framework of inheriting interfaces for the existing and new algorithms in Java 17, so that the concrete algorithms can easily be exchanged in the future:</p><p><img src="https://www.happycoders.eu/wp-content/uploads/2021/12/random_number_generators_java17-800x438.png" alt="Java 17 Pseudo-Random Number Generators"></p><p>Java 17 Pseudo-Random Number Generators</p><p>The methods common to all random number generators such as <code>nextInt()</code>and <code>nextDouble()</code>are <code>RandomGenerator</code>defined in . If you only need these methods, you should always use this interface in the future.</p><p>The framework includes three new types of random number generators:</p><ul><li><code>JumpableGenerator</code>: provides methods to skip a large number of random numbers (e.g. 2 <sup><span><span>64 ).</span></span></sup></li><li><code>LeapableGenerator</code>: provides methods to skip a <em>very</em> large number of random numbers (e.g. 2 <sup><span><span>128 ).</span></span></sup></li><li><code>ArbitrarilyJumpableGenerator</code>: provides additional methods to skip <em>any</em> number of random numbers.</li></ul><p>Also, code duplicated in the existing classes has been eliminated and code has been extracted into non-public abstract classes (not visible in the class diagram) to make it reusable for future random number generator implementations.</p><p><code>RandomGeneratorFactory</code>New random number generators can be added and instantiated via the Service Provider Interface (SPI) in the future .</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>With asynchronous logging, Java 17 brings a long-overdue performance improvement to the Unified JVM logging system introduced in Java 9.</p><h3 id="Unified-Logging-Supports-Asynchronous-Log-Flushing"><a href="#Unified-Logging-Supports-Asynchronous-Log-Flushing" class="headerlink" title="Unified Logging Supports Asynchronous Log Flushing"></a>Unified Logging Supports Asynchronous Log Flushing</h3><p>Asynchronous logging is a feature supported by all Java logging frameworks. The application thread first writes log messages to a queue. A separate I&#x2F;O thread then routes them to the configured output (console, file, or network).</p><p>The application thread does not have to wait for the I&#x2F;O subsystem to process the message.</p><p>As of Java 17, asynchronous logging can also be activated for the JVM itself. This is done using the following VM option:</p><p><code>-Xlog:async</code></p><p>The logging queue is limited to a fixed size. If the application sends more log messages than the I&#x2F;O thread can process, the queue fills up. She then rejects further messages without comment.</p><p>The size of the queue can be adjusted using the following VM option:</p><p><code>-XX:AsyncLogBufferSize=&lt;Bytes&gt;</code></p><p><em>There is no JDK Enhancement Proposal for this extension.</em></p><h2 id="Preview-and-Incubator-features"><a href="#Preview-and-Incubator-features" class="headerlink" title="Preview and Incubator features"></a>Preview and Incubator features</h2><p>Even though Java 17 is a long-term support (LTS) release, it contains preview and incubator features that are expected to reach production maturity in one of the next “intermediate releases”. If you only use LTS releases, you have to wait at least until Java 23 to use these features.</p><h3 id="Pattern-Matching-for-switch-Preview"><a href="#Pattern-Matching-for-switch-Preview" class="headerlink" title="Pattern Matching for switch (Preview)"></a>Pattern Matching for switch (Preview)</h3><p>In Java 16 <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Pattern_Matching_for_instanceof">“Pattern Matching for instanceof”</a> was introduced. This made explicit casts after <code>instanceof</code>tests superfluous. This allows e.g. B. Code like the following:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">if</span> (obj instanceof String s) &#123;<br>  <span class="hljs-keyword">if</span> (s.length() &gt; <span class="hljs-number">5</span>) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.toUpperCase());<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.toLowerCase());<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj instanceof <span class="hljs-type">Integer</span> i) &#123;<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i * i);<br>&#125;Code <span class="hljs-keyword">language</span>:  Java  ( java )<br></code></pre></td></tr></table></figure><p>With <a href="https://openjdk.org/jeps/406">JDK Enhancement Proposal 406</a> , the check whether an object is an instance of a certain class can also be written as a <code>switch</code>statement (or expression) in the future.</p><h4 id="Pattern-matching-for-switch-statements"><a href="#Pattern-matching-for-switch-statements" class="headerlink" title="Pattern matching for switch statements"></a>Pattern matching for switch statements</h4><p>Here is the example from above rewritten into a <code>switch</code>statement:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">switch (obj) &#123;<br>  <span class="hljs-keyword">case</span> String s -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (s.length() &gt; <span class="hljs-number">5</span>) &#123;<br>      <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.toUpperCase());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.toLowerCase());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">case</span> <span class="hljs-type">Integer</span> i -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i * i);<br><br>  <span class="hljs-keyword">default</span> -&gt; &#123;&#125;<br>&#125;Code <span class="hljs-keyword">language</span>:  Java  ( java )<br></code></pre></td></tr></table></figure><p>It is noticeable that the <code>default</code>case must be specified - in this case with an empty code block, since an action should only be carried out for strings and integers.</p><p>The code becomes much more readable if we combine <code>case</code>- and - expressions with a logical “and” (this is then called a “guarded pattern”):<code>if</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">switch (obj) &#123;<br>  <span class="hljs-keyword">case</span> String s &amp;&amp; s.length() &gt; <span class="hljs-number">5</span> -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.toUpperCase());<br>  <span class="hljs-keyword">case</span> String s                   -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.toLowerCase());<br><br>  <span class="hljs-keyword">case</span> <span class="hljs-type">Integer</span> i                  -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i * i);<br><br>  <span class="hljs-keyword">default</span> -&gt; &#123;&#125;<br>&#125;<br>Code <span class="hljs-keyword">language</span>:  Java  ( java )<br></code></pre></td></tr></table></figure><p>It is important that a so-called “dominant <em>pattern</em> “ must come after a “dominant <em>pattern</em> “. In the example, the shorter pattern from line 3 “String s” dominates the longer one from line 2.</p><p>If we swapped these lines, it would look like this:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">switch</span> (obj) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-built_in">String</span> s                   -&gt; System.out.println(s.toLowerCase());<br>  <span class="hljs-keyword">case</span> <span class="hljs-built_in">String</span> s &amp;&amp; s.length() &gt; <span class="hljs-number">5</span> -&gt; System.out.println(s.toUpperCase());<br><br>  ...<br>&#125;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>In this case, the compiler would criticize line 3 with the following error message:</p><p><em>Label is dominated by a preceding case label ‘String s’</em></p><p>The reason for this is that now every string – no matter what length – is matched by the pattern “String s” (line 2) and doesn’t even get to the second case test (line 3).</p><h4 id="Pattern-matching-for-switch-expressions"><a href="#Pattern-matching-for-switch-expressions" class="headerlink" title="Pattern matching for switch expressions"></a>Pattern matching for switch expressions</h4><p>Pattern matching can also be used for <a href="https://www.happycoders.eu/de/java/switch-expressions/#switch-als-ausdruck-mit-ruckgabewert"><code>switch</code>expressions</a> ( i.e. <code>switch</code>with a return value):</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">String</span> output = <span class="hljs-keyword">switch</span> (obj) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-built_in">String</span> s &amp;&amp; s.length() &gt; <span class="hljs-number">5</span> -&gt; s.toUpperCase();<br>  <span class="hljs-keyword">case</span> <span class="hljs-built_in">String</span> s                   -&gt; s.toLowerCase();<br><br>  <span class="hljs-keyword">case</span> Integer i                  -&gt; <span class="hljs-built_in">String</span>.valueOf(i * i);<br>  <br>  <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Unexpected value: &quot;</span> + obj);<br>&#125;;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>The case must <code>default</code>return a value, otherwise the return value of the <code>switch</code>expression could be undefined - or, as in the example, throw an exception.</p><h4 id="Completeness-check-with-Sealed-Classes"><a href="#Completeness-check-with-Sealed-Classes" class="headerlink" title="Completeness check with Sealed Classes"></a>Completeness check with Sealed Classes</h4><p>Incidentally, when using <a href="https://www.happycoders.eu/de/java/sealed-classes-de/">sealed classes</a> , the compiler can check whether <code>switch</code>the statement or expression is complete. If that is the case, a <code>default</code>case is not needed.</p><p>This has an advantage that is not immediately apparent: if one day the sealed hierarchy is extended, the compiler will recognize the then incomplete <code>switch</code>expression and you will be forced to complete it. This saves you from making mistakes that go unnoticed.</p><p>“Pattern Matching for switch” will be presented again in <a href="https://www.happycoders.eu/de/java/java-18-features-de/#Pattern_Matching_for_switch_Second_Preview">Java 18</a> as a preview feature and will probably be ready for production in Java 19.</p><h3 id="Foreign-Function-amp-Memory-API-Incubator"><a href="#Foreign-Function-amp-Memory-API-Incubator" class="headerlink" title="Foreign Function &amp; Memory API (Incubator)"></a>Foreign Function &amp; Memory API (Incubator)</h3><p>Since Java 1.1, the Java Native Interface (JNI) offers the possibility of calling native C code from within Java. However, JNI is extremely complex to implement and slow to run.</p><p>To create a JNI replacement, <a href="https://openjdk.org/projects/panama/">Project Panama</a> was created. Concrete goals of this project are a) to simplify the effort of the implementation (90% of the work is to be eliminated) and b) to improve the performance (by a factor of 4 to 5).</p><p>In the last three Java versions, two new APIs have been introduced, each in the incubator stage:</p><ol><li>The Foreign Memory Access API (introduced in <a href="https://www.happycoders.eu/de/java/java-14-features-de/#Foreign-Memory_Access_API_Incubator">Java 14</a> , refined in <a href="https://www.happycoders.eu/de/java/java-15-features-de/#Foreign-Memory_Access_API_Second_Incubator">Java 15</a> and <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Foreign_Linker_API_Incubator_Foreign-Memory_Access_API_Third_Incubator">Java 16</a> ),</li><li>The Foreign Linker API (introduced in <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Foreign_Linker_API_Incubator_Foreign-Memory_Access_API_Third_Incubator">Java 16</a> ).</li></ol><p>JDK <a href="https://openjdk.org/jeps/412">Enhancement Proposal 412</a> combined both APIs in Java 17 into the “Foreign Function &amp; Memory API”.</p><p>This is still in the incubator stage, so it may still be subject to significant changes. <a href="https://www.happycoders.eu/de/java/java-19-features/#Foreign_Function_Memory_API_Preview">I will introduce the new API in the Java 19</a> article when it reaches the preview stage.</p><h3 id="Vector-API-Second-Incubator"><a href="#Vector-API-Second-Incubator" class="headerlink" title="Vector API (Second Incubator)"></a>Vector API (Second Incubator)</h3><p><a href="https://www.happycoders.eu/de/java/java-16-features-de/#Vector_API_Incubator">As already described in the article about Java 16</a> , the Vector API is not about the old <code>java.util.Vector</code>class, but about mapping mathematical vector calculations to modern CPU architectures with single-instruction-multiple-data (SIMD) support.</p><p>JDK <a href="https://openjdk.org/jeps/414">Enhancement Proposal 414</a> improved performance and extended the API, e.g. B. to support <code>Character</code>(previously , <code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>and <code>Float</code>were <code>Double</code>supported).</p><p>Because features in Incubator status can still undergo significant changes, I’ll announce the feature when it reaches Preview status.</p><h2 id="Deprecations-and-Deletion"><a href="#Deprecations-and-Deletion" class="headerlink" title="Deprecations and Deletion"></a>Deprecations and Deletion</h2><p>In Java 17, some obsolete features were again marked as “deprecated for removal” or completely removed.</p><h3 id="Deprecate-the-Applet-API-for-Removal"><a href="#Deprecate-the-Applet-API-for-Removal" class="headerlink" title="Deprecate the Applet API for Removal"></a>Deprecate the Applet API for Removal</h3><p>Java applets are no longer supported by any modern web browser and were already marked as “deprecated” in Java 9.</p><p>JDK <a href="https://openjdk.org/jeps/398">Enhancement Proposal 398</a> marks them as “deprecated for removal” in Java 17. This means that they will be completely removed in one of the next releases.</p><h3 id="Deprecate-the-Security-Manager-for-Removal"><a href="#Deprecate-the-Security-Manager-for-Removal" class="headerlink" title="Deprecate the Security Manager for Removal"></a>Deprecate the Security Manager for Removal</h3><p>The Security Manager has been part of the platform since Java 1.0 and was primarily intended to protect the user’s computer and data from downloaded Java applets. These were launched in a sandbox in which the Security Manager generally denied access to resources such as the file system or the network.</p><p>As described in the previous section, Java applets have been marked as “deprecated for removal”; this aspect of the Security Manager will no longer be relevant.</p><p><em>In addition to the browser sandbox, which generally</em> denied access to resources , the Security Manager was also able to secure server applications using policy files. Elasticsearch and Tomcat are examples of this.</p><p>However, it’s not of much interest anymore because it’s complicated to configure and security can now be better implemented via the Java modular system or isolation through containerization.</p><p>In addition, the Security Manager represents a not inconsiderable amount of maintenance work. For all extensions to the Java class library, it must be evaluated to what extent they need to be secured using the Security Manager.</p><p>For these reasons, <a href="https://openjdk.org/jeps/411">JDK Enhancement Proposal 411</a> in Java 17 classified the Security Manager as “deprecated for removal”.</p><p>It is not yet certain when the Security Manager will be completely removed. In Java 18 it will still be included.</p><h3 id="Remove-RMI-Activation"><a href="#Remove-RMI-Activation" class="headerlink" title="Remove RMI Activation"></a>Remove RMI Activation</h3><p>Remote Method Invocation is a technology for invoking methods on “remote objects”, i.e. objects on another JVM.</p><p>RMI Activation allows objects destroyed on the target JVM to be automatically re-instantiated as soon as they are accessed. This is intended to eliminate the need for error handling on the client side.</p><p>However, RMI activation is relatively complex and results in ongoing maintenance costs; it’s also virtually unused, as analysis of open source projects and forums like StackOverflow have shown.</p><p>For this reason, RMI Activation was marked as “deprecated” in <a href="https://www.happycoders.eu/de/java/java-15-features-de/#Deprecate_RMI_Activation_for_Removal">Java 15</a> and completely removed in Java 17 by <a href="https://openjdk.org/jeps/407">JDK Enhancement Proposal 407 .</a></p><h3 id="Remove-the-Experimental-AOT-and-JIT-Compiler"><a href="#Remove-the-Experimental-AOT-and-JIT-Compiler" class="headerlink" title="Remove the Experimental AOT and JIT Compiler"></a>Remove the Experimental AOT and JIT Compiler</h3><p>In Java 9, Graal was added to the JDK as an experimental ahead-of-time (AOT) compiler. In <a href="https://www.happycoders.eu/de/java/java-10-features-de/#Experimental_Java-Based_JIT_Compiler">Java 10</a> , Graal was also made available as a just-in-time (JIT) compiler.</p><p>However, both features have been little used since then. Because the maintenance overhead is significant, Graal has been removed in the JDK 16 builds released by Oracle. Since nobody complained about this, both AOT and JIT compilers have been completely removed in Java 17 with <a href="https://openjdk.org/jeps/410">JDK Enhancement Proposal 410 .</a></p><p>The Java-Level JVM Compiler Interface (JVMCI) used to connect Graal has not been removed, and Graal itself is also being further developed. To use Graal as an AOT or JIT compiler, you can download the Java distribution <a href="https://www.graalvm.org/">GraalVM</a> .</p><h2 id="Other-changes-in-Java-17"><a href="#Other-changes-in-Java-17" class="headerlink" title="Other changes in Java 17"></a>Other changes in Java 17</h2><p>In this section you will find minor changes to the Java class library that you will not come into contact with on a daily basis. Still, I recommend skimming through them at least once so you know where to look when you need a feature.</p><h3 id="New-API-for-Accessing-Large-Icons"><a href="#New-API-for-Accessing-Large-Icons" class="headerlink" title="New API for Accessing Large Icons"></a>New API for Accessing Large Icons</h3><p>Here is a small Swing application that renders the directory <code>C:\Windows</code>‘s filesystem icon on Windows:</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-keyword">File</span><span class="hljs-params">System</span>View <span class="hljs-keyword">file</span><span class="hljs-params">System</span>View = <span class="hljs-keyword">File</span><span class="hljs-params">System</span>View.getFile<span class="hljs-params">System</span>View()<span class="hljs-comment">;</span><br><span class="hljs-keyword">Icon</span> <span class="hljs-keyword">icon</span> = <span class="hljs-keyword">file</span><span class="hljs-params">System</span>View.get<span class="hljs-params">System</span><span class="hljs-keyword">Icon</span>(new <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;C:\\Windows&quot;</span>))<span class="hljs-comment">;</span><br><br>JFrame frame = new JFrame()<span class="hljs-comment">;</span><br>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)<span class="hljs-comment">;</span><br>frame.getContentPane().add(new JLabel(<span class="hljs-keyword">icon</span>))<span class="hljs-comment">;</span><br>frame.pack()<span class="hljs-comment">;</span><br>frame.setVisible(<span class="hljs-literal">true</span>)<span class="hljs-comment">;Code language:  Java  ( java )</span><br></code></pre></td></tr></table></figure><p>The icon has a size of 16 x 16 pixels, and there was no way to display a higher resolution icon.</p><p>In Java 17 the method was <code>getSystemIcon(File f, int width, int height)</code>added with which you can specify the size of the icon:</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-keyword">Icon</span> <span class="hljs-keyword">icon</span> = <span class="hljs-keyword">file</span><span class="hljs-params">System</span>View.get<span class="hljs-params">System</span><span class="hljs-keyword">Icon</span>(new <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;C:\\Windows&quot;</span>), <span class="hljs-number">512</span>, <span class="hljs-number">512</span>)<span class="hljs-comment">;Code language:  Java  ( java )</span><br></code></pre></td></tr></table></figure><p><em>There is no JDK Enhancement Proposal for this extension.</em></p><h3 id="Add-support-for-UserDefinedFileAttributeView-on-macOS"><a href="#Add-support-for-UserDefinedFileAttributeView-on-macOS" class="headerlink" title="Add support for UserDefinedFileAttributeView on macOS"></a>Add support for UserDefinedFileAttributeView on macOS</h3><p>The following code shows how extended attributes of a file can be written and read:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Path path =<span class="hljs-operator"> ...</span><br><span class="hljs-operator"></span><br><span class="hljs-operator"></span>UserDefinedFileAttributeView view =<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Files</span>.</span></span>get<span class="hljs-constructor">FileAttributeView(<span class="hljs-params">path</span>, UserDefinedFileAttributeView.<span class="hljs-params">class</span>)</span>;<br><br><span class="hljs-comment">// Write the extended attribute with name &quot;foo&quot; and value &quot;bar&quot;</span><br>view.write(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardCharsets</span>.</span><span class="hljs-module"><span class="hljs-identifier">UTF_8</span>.</span></span>encode(<span class="hljs-string">&quot;bar&quot;</span>));<br><br><span class="hljs-comment">// Print a list of all extended attribute names</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;attribute names: &quot;</span> + view.<span class="hljs-built_in">list</span><span class="hljs-literal">()</span>);<br><br><span class="hljs-comment">// Read the extended attribute &quot;foo&quot;</span><br>ByteBuffer byteBuffer = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ByteBuffer</span>.</span></span>allocate(<span class="hljs-number">1024</span>);<br>view.read(<span class="hljs-string">&quot;foo&quot;</span>, byteBuffer);<br>byteBuffer.flip<span class="hljs-literal">()</span>;<br>String value = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardCharsets</span>.</span><span class="hljs-module"><span class="hljs-identifier">UTF_8</span>.</span></span>decode(byteBuffer).<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;value of &#x27;foo&#x27;: &quot;</span> + value);Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>This functionality has existed since Java 7, but was not previously supported on macOS either. Since Java 17, the function is now also available for macOS.</p><p><em>There is no JDK Enhancement Proposal for this extension.</em></p><h3 id="System-Property-for-Native-Character-Encoding-Name"><a href="#System-Property-for-Native-Character-Encoding-Name" class="headerlink" title="System Property for Native Character Encoding Name"></a>System Property for Native Character Encoding Name</h3><p>As of Java 17, the system property “native.encoding” can be used to call up the standard character encoding of the operating system:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;native encoding: &quot; + <span class="hljs-keyword">System</span>.getProperty(&quot;native.encoding&quot;));Code <span class="hljs-keyword">language</span>:  Java  ( java )<br></code></pre></td></tr></table></figure><p>On Windows it <code>Cp1252</code>outputs , on Linux and macOS <code>UTF-8</code>.</p><p>If you call this code with Java 16 or earlier, is <code>null</code>output.</p><p><em>There is no JDK Enhancement Proposal for this extension.</em></p><h3 id="Restore-Always-Strict-Floating-Point-Semantics"><a href="#Restore-Always-Strict-Floating-Point-Semantics" class="headerlink" title="Restore Always-Strict Floating-Point Semantics"></a>Restore Always-Strict Floating-Point Semantics</h3><p>An almost unknown Java keyword is <code>strictfp</code>. It is used in class definitions to make floating point operations strict within a class. This means that they lead to the same, predictable results on all architectures.</p><p>Strict floating-point semantics was the default behavior prior to Java 1.2 (that is, more than 20 years ago).</p><p>As of Java 1.2, the “standard floating point semantics” was used by default, which could lead to slightly different results depending on the processor architecture. On the other hand, it performed better on the x87 floating-point coprocessor that was widespread at the time, since it had to perform additional operations for the strict semantics (you can find more details in this <a href="https://en.wikipedia.org/wiki/Strictfp">Wikipedia article</a> ).</p><p>Starting with Java 1.2, anyone who wanted to continue to use strict calculations had to <code>strictfp</code>mark this with the keyword in the class definition:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> strictfp <span class="hljs-keyword">class</span> <span class="hljs-symbol">PredictiveCalculator</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br>Code language:  Java  ( java )<br></code></pre></td></tr></table></figure><p>Modern hardware can carry out the strict floating-point semantics without any loss of performance, so that in <a href="https://openjdk.org/jeps/306">JDK Enhancement Proposal 306</a> it was decided to make this the standard semantics again from Java 17.</p><p>The <code>strictfp</code>keyword is therefore superfluous. Using it results in a compiler warning:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ javac PredictiveCalculator.java<br>PredictiveCalculator.java:<span class="hljs-number">3</span>: <span class="hljs-built_in">warning</span>: [strictfp] <span class="hljs-keyword">as</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">release</span> <span class="hljs-number">17</span>, <br><span class="hljs-keyword">all</span> floating-<span class="hljs-type">point</span> expressions are evaluated strictly <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;strictfp&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> required<br>Code <span class="hljs-keyword">language</span>:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><h3 id="New-macOS-Rendering-Pipeline"><a href="#New-macOS-Rendering-Pipeline" class="headerlink" title="New macOS Rendering Pipeline"></a>New macOS Rendering Pipeline</h3><p>In 2018, Apple marked the OpenGL library previously used by Java Swing for rendering under macOS as “deprecated” and presented the <a href="https://developer.apple.com/metal/">Metal framework</a> as its successor.</p><p><a href="https://openjdk.org/jeps/382">JDK Enhancement Proposal 382</a> transitions the Swing rendering pipeline for macOS to the Metal API.</p><h3 id="macOS-x2F-AArch64-Port"><a href="#macOS-x2F-AArch64-Port" class="headerlink" title="macOS&#x2F;AArch64 Port"></a>macOS&#x2F;AArch64 Port</h3><p>Apple has announced that it will switch Macs from x64 to AArch64 CPUs in the long term. Accordingly, a corresponding port is provided with <a href="https://openjdk.org/jeps/391">JDK Enhancement Proposal 391 .</a></p><p>The code is an extension of the AArch64 ports for Linux and Windows released in Java 9 and <a href="https://www.happycoders.eu/de/java/java-16-features-de/#WindowsAArch64_Port">Java 16 with macOS-specific adjustments.</a></p><h3 id="New-Page-for-“New-API”-and-Improved-“Deprecated”-Page"><a href="#New-Page-for-“New-API”-and-Improved-“Deprecated”-Page" class="headerlink" title="New Page for “New API” and Improved “Deprecated” Page"></a>New Page for “New API” and Improved “Deprecated” Page</h3><p>In JavaDoc generated from Java 17, there is a “NEW” page that shows all new features grouped by version. To do this, the <code>@since</code>tags of the modules, packages, classes, etc. are evaluated.</p><p><img src="https://www.happycoders.eu/wp-content/uploads/2021/12/javadoc_since_java_17-800x503.png" alt="&quot;NEW&quot; page in JavaDoc generated since Java 17"></p><p>“NEW” page in JavaDoc generated since Java 17</p><p>In addition, the “DEPRECATED” page has been revised. Up until Java 16, here is an ungrouped list of all features marked as “deprecated”:</p><p><img src="https://www.happycoders.eu/wp-content/uploads/2021/12/javadoc_deprecated_java_16-800x435.png" alt="Java 16 DEPRECATED page"></p><p>Java 16 DEPRECATED page</p><p>Starting with Java 17, we see the features marked as “deprecated” grouped by release:</p><p><img src="https://www.happycoders.eu/wp-content/uploads/2021/12/javadoc_deprecated_java_17-800x460.png" alt="Java 17 DEPRECATED page"></p><p>Java 17 DEPRECATED page</p><p><em>There is no JDK Enhancement Proposal for this extension.</em></p><h3 id="Complete-list-of-all-changes-in-Java-17"><a href="#Complete-list-of-all-changes-in-Java-17" class="headerlink" title="Complete list of all changes in Java 17"></a>Complete list of all changes in Java 17</h3><p>This article has presented all changes defined in JDK Enhancement Proposals (JEPs) as well as numerous class library extensions for which no JEPs exist. For more changes, especially to the security libraries, see the <a href="https://www.oracle.com/java/technologies/javase/17-relnote-issues.html">official Java 17 release notes</a> .</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Although Java 17 is the latest LTS release, this release is not significantly different from the previous ones. We got a mix of:</p><ul><li>new language features (sealed classes),</li><li>API changes ( <code>InstantSource</code>, <code>HexFormat</code>, context-specific deserialization filters),</li><li>a performance improvement (asynchronous logging of the JVM),</li><li>Deprecations and deletions (Applet API, Security Manager, RMI Activation, AOT and JIT Compiler)</li><li>und neuen Preview- und Incubator-Features (Pattern Matching for switch, Foreign Function &amp; Memory API, Vector API).</li></ul><p>In addition, the path taken in Java 9 with Project Jigsaw has been brought to an end by removing the transitionally provided “Relaxed Strong Encapsulation” mode and access to private members of other modules (deep reflection) must always be explicitly released.</p><p>Did you like the article? Then please leave me a comment or share the article using one of the share buttons at the end.</p><p><a href="https://www.happycoders.eu/de/java/java-18-features-de/">Java 18</a> is just around the corner and the features it contains are certain. I will present these in the next article. Would you like to be informed when the article goes online? Then <a href="https://www.happycoders.eu/de/java/java-17-features-de/#">click here</a> to sign up for the HappyCoders newsletter.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot and Kafka Stream, Processing continuous data streams</title>
    <link href="/2022/11/13/kafka-streams-and-spring-boot/"/>
    <url>/2022/11/13/kafka-streams-and-spring-boot/</url>
    
    <content type="html"><![CDATA[<p>Processing continuous data streams in distributed systems without any time delay poses a number of challenges. We show you how stream processing can succeed with Kafka Streams and Spring Boot.</p><p><img src="https://media.graphassets.com/S9gkDSDBR8mtW0N24a95"></p><p>Everything in flow: If you look at data as a continuous stream of information, you can get a lot of speed out of it.</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>Here’s the ultra-short summary:</p><ul><li>Stream processing is well suited to process large amounts of data asynchronously and with minimal delay.</li><li>Modern streaming frameworks allow you to align your application architecture completely with event streams and turn your data management inside out. The event stream becomes the “ <em>source of truth</em> ”.</li><li>With Kafka Streams, Kafka offers an API to process streams and map complex operations to them. means<a href="https://docs.confluent.io/platform/current/streams/concepts.html#streams-concepts-kstream"><em>KStreams</em></a> and<a href="https://docs.confluent.io/platform/current/streams/concepts.html#ktable"><em>KTables</em></a> you can also map more complex use cases that have to maintain a state. This state is managed by Kafka, so you don’t have to worry about data management yourself.</li><li>Spring Boot offers one<a href="https://spring.io/projects/spring-cloud-stream">Stream abstraction</a> that can be used to implement stream processing workloads.</li></ul><p>You can find the entire project at<a href="https://github.com/metao1/spring-kafka-streams-telemetry">GitHub</a>.</p><h2 id="Processing-large-amounts-of-data-quickly-–-a-perennial-topic"><a href="#Processing-large-amounts-of-data-quickly-–-a-perennial-topic" class="headerlink" title="Processing large amounts of data quickly – a perennial topic"></a>Processing large amounts of data quickly – a perennial topic</h2><p>In our everyday project environment, we often deal with use cases in which we have to process a continuous stream of events through several systems involved with as little delay as possible. Two examples:</p><ul><li>Let’s imagine a classic web shop: customers order goods around the clock. The information about the incoming order is of interest for various subsystems: Among other things, the warehouse needs information about the items to be shipped, we have to write an invoice and maybe now reorder goods ourselves.</li><li>Another scenario: A car manufacturer analyzes their vehicles’ telemetry data to improve the durability of their vehicles. For this purpose, the components of thousands of cars send sensor data every second, which then has to be examined for anomalies.</li></ul><p>The larger the amounts of data in both examples, the more difficult it becomes for us to scale our system adequately and to process the data in the shortest possible time. This describes a general problem: the volume of data that we are confronted with in everyday life is constantly increasing, while our customers expect us to process the data and make it usable as quickly as possible.<a href="">Modern Stream Processing Frameworks</a> should address precisely these aspects.</p><p>In this blog post, we would like to use a concrete use case to demonstrate how a stream processing architecture can be implemented with Spring Boot and Apache Kafka Streams. We want to go into the conception of the overall system as well as the everyday problems that we should take into account during implementation.</p><h2 id="Streams-and-events-briefly-outlined"><a href="#Streams-and-events-briefly-outlined" class="headerlink" title="Streams and events briefly outlined"></a>Streams and events briefly outlined</h2><p>We can classify stream processing as an alternative to batch processing. Instead of “heaping” all incoming data and processing them en bloc at a later point in time, the idea behind stream processing is to view incoming data as a continuous stream: the data is processed continuously. Depending on the API and programming model, we can use a corresponding domain-specific language to define operations on the data stream. Sender and receiver do not need any knowledge about each other. The systems participating in the stream are usually decoupled from one another via a corresponding messaging backbone.</p><p>In addition to the advantages of time-critical processing of data, the concept is well suited to reducing dependencies between services in distributed systems. Through indirection via a central messaging backbone, services can now switch to an asynchronous communication model in that they no longer communicate via commands but via events. While commands are direct, synchronous calls between services that trigger an action or result in a change of state, events only transmit the information that an event has occurred. With event processing, the recipient decides when and how this information is processed. This procedure is helpful to achieve a looser coupling between the components of an overall system<a href="https://www.confluent.io/designing-event-driven-systems/">[1]</a>.</p><p>Using Kafka as a stream processing platform allows us to align our overall system to events, as the next section shows.</p><h2 id="Kafka-as-a-stream-processing-platform"><a href="#Kafka-as-a-stream-processing-platform" class="headerlink" title="Kafka as a stream processing platform"></a>Kafka as a stream processing platform</h2><p>What distinguishes Kafka from classic message brokers such as RabbitMQ or Amazon SQS is the permanent storage of event streams and the provision of an API for processing these events as streams. This enables us to turn the architecture of a distributed system inside out and make these events the <em>“source of truth”</em> : If the state of our entire system can be established based on the sequence of all events and these events are stored permanently, this state can be changed at any time by processing of the event log can be (re)established. Martin Kleppmann described the concept of a globally available, unchangeable event log as <em>“turning the database inside out”</em> .<a href="https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/">[2]</a>. What is meant by this is that we can distribute the concepts that we traditionally provide encapsulated as a black box within a relational database (a transaction log, a query engine, indexes and caches) through Kafka and Kafka Streams to the components of a system.<br>To build a streaming architecture based on this theory, we use two different components from the Kafka ecosystem:</p><ul><li><strong>Kafka Cluster</strong> : Provides event storage. Acts as the immutable and permanently stored transaction log.</li><li><strong>Kafka Streams</strong> : Provides the API for stream processing (Streams API). Abstracts the components for generating and consuming the messages and provides the programming model to process the events and map caches and queries to them<a href="https://kafka.apache.org/30/documentation/streams/core-concepts">[3]</a></li></ul><p>In addition to aligning to events and providing APIs to process them, Kafka also comes with some mechanisms to scale with large amounts of data. The most important mechanism is partitioning: messages are distributed to different partitions so that they can be read and written in parallel as efficiently as possible. Provides a good overview of the central concepts and vocabulary in the Kafka cosmos<a href="https://kafka.apache.org/documentation/#intro_concepts_and_terms">[4]</a>.</p><p>Based on a concrete use case, we now want to show you how we can implement a distributed streaming architecture with Spring Boot and Kafka.</p><h2 id="An-exemplary-use-case"><a href="#An-exemplary-use-case" class="headerlink" title="An exemplary use case"></a>An exemplary use case</h2><p>Let’s imagine that our customer - a space agency - commissioned us to develop a system for evaluating telemetry data from various space probes in space. The general conditions and requirements are as follows:</p><ul><li>We have an unspecified set of probes giving us a steady stream of telemetry readings. These probes belong to either the US Space Agency (NASA) or the European Space Agency (ESA).</li><li>All space probes send their measurement data in the imperial system.</li><li>Our customer is only interested in the aggregated measurement data per probe:<ul><li>What is the total distance a given probe has traveled so far?</li><li>What is the top speed the probe has reached so far?</li></ul></li><li>Since the measurement data from the NASA and ESA probes are processed by different teams, they should be able to be consumed separately.<ul><li>Data from the ESA probes are to be converted from the imperial to the metric system.</li></ul></li></ul><h2 id="The-target-architecture"><a href="#The-target-architecture" class="headerlink" title="The target architecture"></a>The target architecture</h2><p>In our example, we are dealing with a continuous stream of readings that we consider our events. Since we have to perform a series of transformations and aggregations on these, the use case lends itself well to processing as a stream. The need to aggregate measurement data also suggests that some part of our application needs to be able to remember a state in order to keep the summed values per probe.</p><p>To implement the use case, we divide the application into 3 subcomponents. A Kafka cluster forms the central hub for communication between the components:</p><p><img src="/images/Xy3kzvYgT6GRsaxYg6va.png" alt="Architectural sketch of our sample application"><br>We will build this example architecture to illustrate our use case. We use Kafka as the central communication hub between our services.</p><p>We arrange the distribution of tasks between the services as follows:</p><ul><li><strong>kafka-samples-producer</strong> : Converts the received measurement data into a machine-readable format and stores it on a Kafka topic. Since we don’t have any real space probes handy at the moment, we let this service generate random measurement data.</li><li><strong>kafka-samples-streams</strong> : Performs the calculation of the aggregated measurement data and the subdivision by measurement data for NASA or ESA. Since the previously calculated values are also included in the calculation, the application must maintain a local state. We map this using the Streams API in the form of two KTables (we already separate them by space agency here). The KTables are materialized transparently for the application by a so-called state store, which saves the history of the state in Kafka Topics.</li><li><strong>kafka-samples-consumer</strong> : Represents an example client service of a space agency, which is responsible for the further processing of the aggregated measurement data. In our case, this reads both output topics, in the case of the ESA, converts them to the metric system and logs these values to stdout.</li></ul><h2 id="Implementation-of-the-Services"><a href="#Implementation-of-the-Services" class="headerlink" title="Implementation of the Services"></a>Implementation of the Services</h2><p>We have implemented all services with Spring Boot and Kotlin and use the for configuration and implementation<a href="https://spring.io/projects/spring-cloud-stream">Spring abstraction for streams</a>. In the following sections we will go into the concrete implementation of the individual services.</p><h3 id="Generation-of-the-telemetry-data-kafka-samples-producer"><a href="#Generation-of-the-telemetry-data-kafka-samples-producer" class="headerlink" title="Generation of the telemetry data (kafka-samples-producer)"></a>Generation of the telemetry data (kafka-samples-producer)</h3><p>To write the (fictitious) probe measurement data, we use the Kafka Producer API, available in Spring via the<a href="https://cloud.spring.io/spring-cloud-stream-binder-kafka/spring-cloud-stream-binder-kafka.html#_apache_kafka_binder">Spring Cloud Stream Binder for Kafka</a> provided. We configure the service via the (<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-producer/src/main/resources/application.yml">application.yml</a>) as follows:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kafka-telemetry-data-producer</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">stream:</span><br>      <span class="hljs-attr">kafka:</span><br>        <span class="hljs-attr">binder:</span><br>          <span class="hljs-attr">brokers:</span> <span class="hljs-string">&quot;localhost:29092&quot;</span><br>        <span class="hljs-attr">bindings:</span><br>          <span class="hljs-attr">telemetry-data-out-0:</span><br>            <span class="hljs-attr">producer:</span><br>              <span class="hljs-attr">configuration:</span><br>                <span class="hljs-attr">key.serializer:</span> <span class="hljs-string">org.springframework.kafka.support.serializer.ToStringSerializer</span><br>                <span class="hljs-attr">value.serializer:</span> <span class="hljs-string">org.springframework.kafka.support.serializer.JsonSerializer</span><br>                <span class="hljs-comment"># Otherwise com.metao.samples.kafkasamplesproducer.event.TelemetryData will be added as a header info</span><br>                <span class="hljs-comment"># which can&#x27;t be deserialized by consumers (unless they have kafka.properties.spring.json.use.type.headers: false themselves)</span><br>                <span class="hljs-attr">spring.json.add.type.headers:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">bindings:</span><br>        <span class="hljs-attr">telemetry-data-out-0:</span><br>          <span class="hljs-attr">producer:</span><br>            <span class="hljs-comment"># use kafka internal encoding</span><br>            <span class="hljs-attr">useNativeEncoding:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">space-probe-telemetry-data</span><br></code></pre></td></tr></table></figure><p>The configuration consists of a Kafka-specific (upper <code>bindings</code>configuration block) and a technology-agnostic (lower <code>bindings</code>configuration block) part, which are bound together via the binding.</p><p>In the example we create the binding <code>telemetry-data-out-0</code>. This declaration is based on the following convention:</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;Funktionsname&gt;</span>-<span class="hljs-attribute">&lt;in|out&gt;</span>-<span class="hljs-attribute">&lt;n&gt;</span><br></code></pre></td></tr></table></figure><p>The <code>in</code>or <code>out</code>defines whether the binding is an input (an incoming stream of data) or an output (an outgoing stream of data). With the number increasing from 0 at the end, a function can be attached to several bindings - and thus read from several topics with one function - or written to several topics.</p><p>In the Kafka-specific part, we prevent Spring from adding a Type header to every message. Otherwise, this would mean that a consumer of the message - should he not actively prevent this - does not know the class specified in the header and therefore cannot deserialize the message.</p><p>The technology-agnostic part is used in this form for all Spring Cloud Streams-supported implementations like RabbitMQ, AWS SQS, etc. <code>destination</code>All you have to do here is specify the output target ( ) – in our case, this maps to the name of the Kafka topic that we want to describe.</p><p>After the service is configured, we define a Spring component to write the metrics (<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-producer/src/main/kotlin/com/metao1/samples/kafkasamplesproducer/TelemetryDataStreamBridge.kt">TelemetryDataStreamBridge.kt</a>):</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package com<span class="hljs-selector-class">.metao</span><span class="hljs-selector-class">.samples</span><span class="hljs-selector-class">.kafkasamplesproducer</span><br><br>import com<span class="hljs-selector-class">.metao</span><span class="hljs-selector-class">.samples</span><span class="hljs-selector-class">.kafkasamplesproducer</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.TelemetryData</span><br>import mu<span class="hljs-selector-class">.KotlinLogging</span><br>import org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><span class="hljs-selector-class">.factory</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.Autowired</span><br>import org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.stream</span><span class="hljs-selector-class">.function</span><span class="hljs-selector-class">.StreamBridge</span><br>import org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.KafkaHeaders</span><br>import org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.messaging</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.MessageBuilder</span><br>import org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.stereotype</span><span class="hljs-selector-class">.Component</span><br><br>@Component<br>class <span class="hljs-built_in">TelemetryDataStreamBridge</span>(@Autowired val streamBridge: StreamBridge) &#123;<br><br>    private val logger = KotlinLogging<span class="hljs-selector-class">.logger</span> &#123;&#125;<br><br>    fun <span class="hljs-built_in">send</span>(telemetryData: TelemetryData) &#123;<br>        val kafkaMessage = MessageBuilder<br>            <span class="hljs-selector-class">.withPayload</span>(telemetryData)<br>            <span class="hljs-comment">// Make sure all messages for a given probe go to the same partition to ensure proper ordering</span><br>            <span class="hljs-selector-class">.setHeader</span>(KafkaHeaders<span class="hljs-selector-class">.MESSAGE_KEY</span>, telemetryData.probeId)<br>            <span class="hljs-selector-class">.build</span>()<br>        logger<span class="hljs-selector-class">.info</span> &#123; <span class="hljs-string">&quot;Publishing space probe telemetry data: Payload: &#x27;$&#123;kafkaMessage.payload&#125;&#x27;&quot;</span> &#125;<br>        streamBridge<span class="hljs-selector-class">.send</span>(<span class="hljs-string">&quot;telemetry-data-out-0&quot;</span>, kafkaMessage)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>As an entry point into the streaming world, Spring Cloud Streaming offers two different options:</p><ul><li>The imperative<code>StreamBridge</code></li><li>the reactive one<code>EmitterProcessor</code></li></ul><p>For this use case we use the <code>StreamBridge</code>. We can have Spring inject this and write the generated probe data to our topic. We use the ID of the respective probe as the message key, so that data from a probe always end up on the same partition. <code>send()</code>We pass the binding created in the configuration to the function .</p><h3 id="Processing-of-the-telemetry-data-kafka-samples-streams"><a href="#Processing-of-the-telemetry-data-kafka-samples-streams" class="headerlink" title="Processing of the telemetry data (kafka-samples-streams)"></a>Processing of the telemetry data (kafka-samples-streams)</h3><p>Most of the use case is processed in this part of our application. We use the Kafka Streams API to consume the generated probe data, perform the necessary calculations, and then write the aggregated measurement data to the two target topics. In Spring Boot, we can access the Streams API via the<a href="https://cloud.spring.io/spring-cloud-stream-binder-kafka/spring-cloud-stream-binder-kafka.html#_kafka_streams_binder">Spring Cloud Stream Binder for Kafka Streams</a>.</p><p>Analogous to the Producer API, we start with creating our bindings and configure our service via the file <a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-streams/src/main/resources/application.yml">application.yml</a>.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs stylus">spring:<br>  kafka<span class="hljs-selector-class">.properties</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.json</span><span class="hljs-selector-class">.use</span><span class="hljs-selector-class">.type</span><span class="hljs-selector-class">.headers</span>: false<br>  application:<br>    name: kafka-telemetry-data-aggregator<br>  cloud:<br>    function:<br>      definition: aggregateTelemetryData<br>    stream:<br>      bindings:<br>        aggregateTelemetryData-<span class="hljs-keyword">in</span>-<span class="hljs-number">0</span>:<br>          destination: space-probe-telemetry-data<br>        aggregateTelemetryData-out-<span class="hljs-number">0</span>:<br>          destination: space-probe-aggregate-telemetry-data-nasa<br>        aggregateTelemetryData-out-<span class="hljs-number">1</span>:<br>          destination: space-probe-aggregate-telemetry-data-esa<br>      kafka:<br>        binder:<br>          brokers: <span class="hljs-string">&quot;localhost:29092&quot;</span><br>        streams:<br>          bindings:<br>            aggregateTelemetryData-<span class="hljs-keyword">in</span>-<span class="hljs-number">0</span><span class="hljs-selector-class">.consumer</span>:<br>              keySerde: org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialization</span>.Serdes<span class="hljs-variable">$StringSerde</span><br>              valueSerde: com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><span class="hljs-selector-class">.serdes</span><span class="hljs-selector-class">.TelemetryDataPointSerde</span><br>              deserializationExceptionHandler: logAndContinue<br>            aggregateTelemetryData-out-<span class="hljs-number">0</span><span class="hljs-selector-class">.producer</span>:<br>              keySerde: org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialization</span>.Serdes<span class="hljs-variable">$StringSerde</span><br>              valueSerde: com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><span class="hljs-selector-class">.serdes</span><span class="hljs-selector-class">.AggregateTelemetryDataSerde</span><br>            aggregateTelemetryData-out-<span class="hljs-number">1</span><span class="hljs-selector-class">.producer</span>:<br>              keySerde: org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialization</span>.Serdes<span class="hljs-variable">$StringSerde</span><br>              valueSerde: com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><span class="hljs-selector-class">.serdes</span><span class="hljs-selector-class">.AggregateTelemetryDataSerde</span><br>management:<br>  endpoints:<br>    web:<br>      exposure:<br>        include: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>To implement the feature, we use the <strong><em>functional style</em></strong> that was introduced with Spring Cloud Stream 3.0.0. To do this, we specify <code>aggregateTelemetryData</code> the name of our bean in the <em>function definition</em> that implements the function. This will contain the actual technical logic.</p><p>Since we are reading from one topic and writing to two topics, we need three bindings here:</p><ul><li>A <code>IN</code>binding to consume our metrics</li><li>A <code>OUT</code>binding to write our aggregated measurement data for NASA</li><li>A <code>OUT</code>binding to write our aggregated measurement data for the ESA</li></ul><p><em>We can view the function</em> declared in the upper part of the configuration as a mapping of our <code>IN</code>bindings to our <code>OUT</code>bindings. In order for this to be associated with the bindings, we must adhere to the Spring convention described in the previous section.</p><p>With the binding configuration complete, we can move on to implementing our business logic. To do this, we create a function that matches the name of the functional binding from our configuration. This function maps our Kafka Streams topology and calculation logic (<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-streams/src/main/kotlin/com/example/kafkasamplesstreams/KafkaStreamsHandler.kt">KafkaStreamsHandler.kt</a>):</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><br><br>import com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><span class="hljs-selector-class">.events</span><span class="hljs-selector-class">.AggregatedTelemetryData</span><br>import com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><span class="hljs-selector-class">.events</span><span class="hljs-selector-class">.SpaceAgency</span><br>import com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><span class="hljs-selector-class">.events</span><span class="hljs-selector-class">.TelemetryDataPoint</span><br>import com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.kafkasamplesstreams</span><span class="hljs-selector-class">.serdes</span><span class="hljs-selector-class">.AggregateTelemetryDataSerde</span><br>import mu<span class="hljs-selector-class">.KotlinLogging</span><br>import org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.serialization</span><span class="hljs-selector-class">.Serdes</span><br>import org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.streams</span><span class="hljs-selector-class">.kstream</span><span class="hljs-selector-class">.KStream</span><br>import org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.streams</span><span class="hljs-selector-class">.kstream</span><span class="hljs-selector-class">.Materialized</span><br>import org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.streams</span><span class="hljs-selector-class">.kstream</span><span class="hljs-selector-class">.Predicate</span><br>import org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.Bean</span><br>import org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.Configuration</span><br><br><br>@Configuration<br>class KafkaStreamsHandler &#123;<br><br>    private val logger = KotlinLogging<span class="hljs-selector-class">.logger</span> &#123;&#125;<br><br>    @Bean<br>    fun <span class="hljs-built_in">aggregateTelemetryData</span>(): java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.function</span>.Function&lt;<br>            KStream&lt;String, TelemetryDataPoint&gt;,<br>            Array&lt;KStream&lt;String, AggregatedTelemetryData&gt;&gt;&gt; &#123;<br>        return java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.function</span>.Function&lt;<br>                KStream&lt;String, TelemetryDataPoint&gt;,<br>                Array&lt;KStream&lt;String, AggregatedTelemetryData&gt;&gt;&gt; &#123; telemetryRecords -&gt;<br>            telemetryRecords<span class="hljs-selector-class">.branch</span>(<br>                <span class="hljs-comment">// Split up the processing pipeline into 2 streams, depending on the space agency of the probe</span><br>                Predicate &#123; _, v -&gt; v<span class="hljs-selector-class">.spaceAgency</span> == SpaceAgency<span class="hljs-selector-class">.NASA</span> &#125;,<br>                Predicate &#123; _, v -&gt; v<span class="hljs-selector-class">.spaceAgency</span> == SpaceAgency<span class="hljs-selector-class">.ESA</span> &#125;<br>            )<span class="hljs-selector-class">.map</span> &#123; telemetryRecordsPerAgency -&gt;<br>                <span class="hljs-comment">// Apply aggregation logic on each stream separately</span><br>                telemetryRecordsPerAgency<br>                    <span class="hljs-selector-class">.groupByKey</span>()<br>                    <span class="hljs-selector-class">.aggregate</span>(<br>                        <span class="hljs-comment">// KTable initializer</span><br>                        &#123; <span class="hljs-built_in">AggregatedTelemetryData</span>(maxSpeedMph = <span class="hljs-number">0.0</span>, traveledDistanceFeet = <span class="hljs-number">0.0</span>) &#125;,<br>                        <span class="hljs-comment">// Calculation function for telemetry data aggregation</span><br>                        &#123; probeId, lastTelemetryReading, aggregatedTelemetryData -&gt;<br>                            <span class="hljs-built_in">updateTotals</span>(<br>                                probeId,<br>                                lastTelemetryReading,<br>                                aggregatedTelemetryData<br>                            )<br>                        &#125;,<br>                        <span class="hljs-comment">// Configure Serdes for State Store topic</span><br>                        Materialized<span class="hljs-selector-class">.with</span>(Serdes<span class="hljs-selector-class">.StringSerde</span>(), <span class="hljs-built_in">AggregateTelemetryDataSerde</span>())<br>                    )<br>                    <span class="hljs-selector-class">.toStream</span>()<br>            &#125;<span class="hljs-selector-class">.toTypedArray</span>()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Performs calculation of per-probe aggregate measurement data.</span><br><span class="hljs-comment">     * The currently calculated totals are held in a Kafka State Store</span><br><span class="hljs-comment">     * backing the KTable created with aggregate() and the most recently</span><br><span class="hljs-comment">     * created aggregate telemetry data record is passed on downstream.</span><br><span class="hljs-comment">     */</span><br>    fun <span class="hljs-built_in">updateTotals</span>(<br>        probeId: String,<br>        lastTelemetryReading: TelemetryDataPoint,<br>        currentAggregatedValue: AggregatedTelemetryData<br>    ): AggregatedTelemetryData &#123;<br>        val totalDistanceTraveled =<br>            lastTelemetryReading<span class="hljs-selector-class">.traveledDistanceFeet</span> + currentAggregatedValue<span class="hljs-selector-class">.traveledDistanceFeet</span><br>        val maxSpeed = <span class="hljs-keyword">if</span> (lastTelemetryReading<span class="hljs-selector-class">.currentSpeedMph</span> &gt; currentAggregatedValue.maxSpeedMph)<br>            lastTelemetryReading<span class="hljs-selector-class">.currentSpeedMph</span> <span class="hljs-keyword">else</span> currentAggregatedValue<span class="hljs-selector-class">.maxSpeedMph</span><br>        val aggregatedTelemetryData = <span class="hljs-built_in">AggregatedTelemetryData</span>(<br>            traveledDistanceFeet = totalDistanceTraveled,<br>            maxSpeedMph = maxSpeed<br>        )<br>        logger<span class="hljs-selector-class">.info</span> &#123;<br>            <span class="hljs-string">&quot;Calculated new aggregated telemetry data for probe $probeId. New max speed: $&#123;aggregatedTelemetryData.maxSpeedMph&#125; and &quot;</span> +<br>                    <span class="hljs-string">&quot;traveled distance $&#123;aggregatedTelemetryData.traveledDistanceFeet&#125;&quot;</span><br><br>        &#125;<br>        return aggregatedTelemetryData<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In order to calculate the aggregated telemetry data per probe, we have to solve three problems in the implementation of the function:</p><h4 id="Implementation-of-the-calculation"><a href="#Implementation-of-the-calculation" class="headerlink" title="Implementation of the calculation"></a>Implementation of the calculation</h4><p>The Kafka Streams API provides a set of predefined operations that we can apply to the incoming stream to perform the computation according to the use case. Since we need to separate the aggregated probe data by space agency, we first use the operation, which returns <code>branch()</code>an array of as a result . <code>KStream</code>We get two streams, which are now already separated by space agency. The probe data can now be calculated. Since the calculation is identical for both agencies, we use <code>map()</code>Kotlin’s operation so that we only have to define the following steps once for both streams. To group and ultimately aggregate the probe data by their Probe ID, we again use native Stream API operations. The operation<a href="https://docs.confluent.io/platform/current/streams/concepts.html#aggregations"><code>aggregate()</code></a> needs three parameters:</p><ul><li>An <strong>Initializer</strong> that determines the initial value if there is no aggregated data yet</li><li>An <strong>Aggregator</strong> function that determines our calculation logic for aggregating the metrics</li><li>The <strong>serializers&#x2F;deserializers</strong> to use to store the aggregated values</li></ul><p><code>aggregate()</code>As a result, the operation returns one that <code>KTable</code>contains the most recently calculated total value for each probe ID. Since our customers are interested in the most up-to-date data, we convert it <code>KTable</code>back into one <code>KStream</code>- every change in the <code>KTable</code>generates an event that contains the last calculated total value.</p><h4 id="Storage-of-the-aggregated-measurement-data"><a href="#Storage-of-the-aggregated-measurement-data" class="headerlink" title="Storage of the aggregated measurement data"></a>Storage of the aggregated measurement data</h4><p>The <code>aggregate()</code>function that we use in our example to calculate the total values is a so-called <em>stateful operation</em> - i.e. a stateful operation that requires a local state in order to be able to take into account all previously calculated values for calculating the currently valid total value. The Kafka Streams API handles the management of state for us by <code>KTable</code>materializing the operation a . One <code>KTable</code>can be thought of as a changelog for key&#x2F;value pairs, which allows us to persist (and restore if necessary) a local state. <code>KTables</code>are in the Kafka cluster by so-called _state stores_materialized. The state store uses a topic managed by Kafka to persist data in the cluster. This saves us from having to manage other infrastructure components, such as a database to keep track of the status.</p><h4 id="Delivery-to-the-various-space-agencies"><a href="#Delivery-to-the-various-space-agencies" class="headerlink" title="Delivery to the various space agencies"></a>Delivery to the various space agencies</h4><p>In order to supply NASA and ESA with the aggregated measurement data relevant to them, we used the operation before the calculation <code>branch()</code>. As a result, our function has a return value of <code>Array&gt;</code>, whose indices correlate with the space agencies. In our case, this means that <code>Array[0]</code>the data is from NASA and <code>Array[1]</code>the data from ESA. This division in turn matches our binding config.</p><p>The resulting KStreams are our aggregation result and are written to the two output topics.</p><h3 id="Consume-the-telemetry-data-kafka-samples-consumer"><a href="#Consume-the-telemetry-data-kafka-samples-consumer" class="headerlink" title="Consume the telemetry data (kafka-samples-consumer)"></a>Consume the telemetry data (kafka-samples-consumer)</h3><p>To read the aggregated probe measurement data, we use the Kafka Consumer API, which, like the Producer, is available via the<a href="https://cloud.spring.io/spring-cloud-stream-binder-kafka/spring-cloud-stream-binder-kafka.html#_apache_kafka_binder">Spring Cloud Stream Binder for Kafka</a> provided. We configure the service for this as follows (<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-consumer/src/main/resources/application.yml">application.yml</a>):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kafka-telemetry-data-consumer</span><br>  <span class="hljs-comment"># Ignore type headers in kafka message</span><br>  <span class="hljs-attr">kafka.properties.spring.json.use.type.headers:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">stream:</span><br>      <span class="hljs-attr">kafka:</span><br>        <span class="hljs-attr">binder:</span><br>          <span class="hljs-attr">brokers:</span> <span class="hljs-string">&quot;localhost:29092&quot;</span><br>        <span class="hljs-attr">bindings:</span><br>          <span class="hljs-comment"># this has to match the consumer bean name with suffix in-0 (for consumer)</span><br>          <span class="hljs-attr">processNasaTelemetryData-in-0:</span><br>            <span class="hljs-attr">consumer:</span><br>              <span class="hljs-attr">configuration:</span><br>                <span class="hljs-attr">key.deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>                <span class="hljs-attr">value.deserializer:</span> <span class="hljs-string">com.metao.samples.kafkasamplesconsumer.serdes.TelemetryDataDeserializer</span><br>          <span class="hljs-attr">processEsaTelemetryData-in-0:</span><br>            <span class="hljs-attr">consumer:</span><br>              <span class="hljs-attr">configuration:</span><br>                <span class="hljs-attr">key.deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>                <span class="hljs-attr">value.deserializer:</span> <span class="hljs-string">com.metao.samples.kafkasamplesconsumer.serdes.TelemetryDataDeserializer</span><br>      <span class="hljs-attr">bindings:</span><br>        <span class="hljs-attr">processNasaTelemetryData-in-0:</span><br>          <span class="hljs-attr">group:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">space-probe-aggregate-telemetry-data-nasa</span><br>        <span class="hljs-attr">processEsaTelemetryData-in-0:</span><br>          <span class="hljs-attr">group:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">space-probe-aggregate-telemetry-data-esa</span><br>    <span class="hljs-attr">function:</span><br>      <span class="hljs-comment"># We define this explicitly since we have several consumer functions</span><br>      <span class="hljs-attr">definition:</span> <span class="hljs-string">processNasaTelemetryData;processEsaTelemetryData</span><br></code></pre></td></tr></table></figure><p>We continue according to the familiar pattern: We implement beans that implement the binding, starting with NASA.</p><p>We create a function that <code>Consumer</code>implements (see<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-consumer/src/main/kotlin/com/metao/samples/kafkasamplesconsumer/KafkaConsumerConfiguration.kt">KafkaConsumerConfiguration.kt</a>). This means that we have an input but no output to another topic and the stream ends in this function.</p><p>The consumer for ESA follows the same pattern as the consumer for NASA, the only difference being that the data transmitted is converted from the imperial system to the metric system. We have this functionality in the <code>init</code>function of our class<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-consumer/src/main/kotlin/com/metao/samples/kafkasamplesconsumer/event/MetricTelemetryData.kt">MetricTelemetryData.kt</a>  capsuled.</p><p>With the implementation of the consumer, our stream processing pipeline is complete and all requirements have been implemented.</p><h2 id="The-finished-solution-in-action"><a href="#The-finished-solution-in-action" class="headerlink" title="The finished solution in action"></a>The finished solution in action</h2><p>If we start our services now, after a few seconds we should see the first aggregated probe data in the Consumer Service log. Additionally, we can take a look at<a href="https://github.com/tchiotludo/akhq">AKHQ</a> Get an overview of the topics and messages in Kafka:</p><p><img src="/images/K3ygZt4RvWW2Evm17u2w.png" alt="AKHQ Web UI in Kafka Topics view"><br>We recognize the inbound and outbound topics accessed by our services, as well as the state stores that our aggregator service has materialized behind the scenes for us in the form of Kafka topics.</p><h2 id="Lessons-learned"><a href="#Lessons-learned" class="headerlink" title="Lessons learned"></a>Lessons learned</h2><p>If you are now thinking about using the whole thing in your projects, we have prepared some questions and argumentation aids for you so that you can make the right decision for you.</p><h3 id="When-should-you-think-about-using-stream-processing"><a href="#When-should-you-think-about-using-stream-processing" class="headerlink" title="When should you think about using stream processing?"></a>When should you think about using stream processing?</h3><p>Stream processing can be useful wherever you are faced with processing large amounts of data and time delays need to be minimized. The decision for or against stream processing should not be based on a single component - the solution should fit the overall architecture of the system and the problem. If your use case has the following attributes, stream processing could be a solution:</p><ul><li>You are faced with a constant stream of data. Example: IoT devices continuously send you sensor data.</li><li>Your workload is continuous and does not have the character of a data delivery. Example: You receive a data export from an old system once a day and must be able to definitely determine the end of a delivery, for example. Batch processing usually makes more sense here.</li><li>The data to be processed are time-critical and must be processed immediately. In the case of larger amounts of data or complex calculations, you always have to think about the scalability of your services in order to keep the processing time low. Streams are suitable for this because you can scale horizontally quite easily through partitioning and asynchronous event processing.</li></ul><h3 id="Should-you-use-Kafka-for-your-stream-processing-workloads"><a href="#Should-you-use-Kafka-for-your-stream-processing-workloads" class="headerlink" title="Should you use Kafka for your stream processing workloads?"></a>Should you use Kafka for your stream processing workloads?</h3><p>We give a cautious <em>“yes”</em> to that . Kafka’s data storage, paired with the Stream Processing API, is a powerful tool and is offered by various providers <em>as a service</em> . This flattens the learning curve and minimizes maintenance. In event-driven use cases, this feels good and right. Unfortunately, we have seen several times that Kafka is used in application architectures as a pure message bus, for batch workloads or in situations where synchronous communication between services would have made more sense. The advantages of Kafka and event-driven architectures remain unused or worse: we find it more difficult than necessary to solve the problem.</p><p>If Kafka is already present in your architecture and your problem fits the technology, we would recommend you to start with the<a href="https://docs.confluent.io/platform/current/streams/concepts.html#stream-processing-application">Stream API capabilities</a> to deal with - data pipelines can often be set up without additional infrastructure components and you can do without components such as relational databases or in-memory data stores. Confluent offers very good<a href="https://www.confluent.io/blog/how-kafka-streams-works-guide-to-stream-processing/">Documents to get you started</a> an.</p><p>In cases where you cannot use Kafka <em>as a service</em> , the effort involved in setting up a Kafka cluster and operating it yourself can outweigh the benefits. In these cases, it may therefore make more sense to use a classic message broker and a relational database.</p><h3 id="Should-you-implement-stream-processing-workloads-with-Kafka-Streams-and-Spring-Boot"><a href="#Should-you-implement-stream-processing-workloads-with-Kafka-Streams-and-Spring-Boot" class="headerlink" title="Should you implement stream processing workloads with Kafka Streams and Spring Boot?"></a>Should you implement stream processing workloads with Kafka Streams and Spring Boot?</h3><p>Clear answer: It depends. If you are already using Spring Boot across the board in your projects, the<a href="https://spring.io/projects/spring-cloud-stream">Spring Streams abstraction</a> save some time when commissioning new services, since configuration and implementation always follow a very similar scheme and we can hide some of the complexity during implementation. However, the Spring path is not quite perfect. Here are the issues that caused us pain:</p><ul><li><strong>Conventions &amp; Documentation</strong> : The configuration with the Spring abstraction consists of a few conventions that are not always properly documented and are sometimes non-transparent, which can cost nerves and time. At the time of writing this article, parts of the Spring documentation were out of date (e.g. the functional programming paradigm we are using is not yet mentioned in the current version of the documentation)</li><li><strong>Error Handling</strong> : When using the Stream Binder for Kafka Streams as in our class<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-streams/src/main/kotlin/com/example/kafkasamplesstreams/KafkaStreamsHandler.kt">KafkaStreamsHandler.kt</a> There is currently no convenient solution for handling exceptions that occur outside of deserialization using on-board tools (we define what should happen to errors during deserialization in<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/kafka-samples-streams/src/main/resources/application.yml#L24">application.yml</a>). The only solution for this at the moment is<a href="https://cloud.spring.io/spring-cloud-stream-binder-kafka/spring-cloud-stream-binder-kafka.html#_handling_non_deserialization_exceptions">to implement error handling past the Streams API</a> or ensure that any deserialization errors are caught. Provides an exemplary approach<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/main/src/main/kotlin/com/example/kafkasamplesstreams/TelemetryAggregationTransformer.kt">TelemetryAggregationTransformer.kt</a>. By bypassing the Streams API, we can handle errors at the message level, for example by <code>try/catch</code>implementing logic. Since we have descended an abstraction level in this example, we unfortunately also lose the automatic state management <code>KTables</code>- we have to manage state stores ourselves if necessary. In this case, unfortunately, you currently have to weigh up what is more important to you.</li><li><strong>Up-to- dateness</strong> : The Spring Dependencies are always a few Kafka releases behind, so that not all features can always be used immediately (see previous point).</li></ul><p>As an alternative to the Spring abstraction, there are various freely usable libraries to integrate the concepts from Kafka Streams into various tech stacks. Confluent offers<a href="https://developer.confluent.io/kafka-languages-and-tools/">well-documented step-by-step recipes</a> for a wide range of supported environments and programming languages to keep the barriers to entry low, regardless of your environment. In this respect, you are free to decide here. If you feel comfortable with Spring Boot: great! If not: that’s ok too!</p><h2 id="A-few-final-words"><a href="#A-few-final-words" class="headerlink" title="A few final words"></a>A few final words</h2><p>In this blog post, we have demonstrated how you can implement the concepts of stream processing using a concrete use case with Spring Boot and Kafka Streams. We hope that with Stream Processing you now have another tool in your toolbox and that you can now approach your next project with complete peace of mind.</p><p>You can find the complete code for our sample project at<a href="https://github.com/metao1/spring-kafka-streams-telemetry">GitHub</a>.</p><h2 id="bonus-material"><a href="#bonus-material" class="headerlink" title="bonus material"></a>bonus material</h2><p>In order not to go beyond the scope of our blog post, we have limited ourselves to a fairly simple use case. However <code>KTables</code>, much more demanding scenarios can also be implemented with . Another slightly more complex example (how do we merge multiple incoming streams?) can be found in our GitHub repo on a<a href="https://github.com/metao1/spring-kafka-streams-telemetry/tree/feature/demonstrate-ktable-joins">separate branch</a>. We combine the incoming streams in the class<a href="https://github.com/metao1/spring-kafka-streams-telemetry/blob/feature/demonstrate-ktable-joins/kafka-samples-streams/src/main/kotlin/com/example/kafkasamplesstreams/KafkaStreamsHandler.kt">KafkaStreamsHandler.kt</a> using the <code>join()</code>operation.</p><h2 id="credentials"><a href="#credentials" class="headerlink" title="credentials"></a>credentials</h2><p>[1] Ben Stopford (2018):<a href="https://www.confluent.io/designing-event-driven-systems/">Designing Event Driven Systems</a> , S. 29 ff.</p><p>[2] Martin Kleppmann (2015): <a href="https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/">Turning the Database inside-out with Apache Samza</a></p><p>[3] Apache Software Foundation (2017): <a href="https://kafka.apache.org/30/documentation/streams/core-concepts">Kafka Streams Core Concepts</a></p><p>[4] Apache Software Foundation (2017): <a href="https://kafka.apache.org/documentation/#intro_concepts_and_terms">Kafka Main Concepts and Terminology</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>What&#39;s new in Java 19</title>
    <link href="/2022/11/13/What_is_new_in_java_19/"/>
    <url>/2022/11/13/What_is_new_in_java_19/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s3.eu-west-1.amazonaws.com/redsys-prod/issues/f7c87d3e8cece7c283301b68/images/cover_x_JM11_22_cover@2x_1663691319585.jpg" alt="java19"></p><hr><p>Java 19 was released on September 20, 2022. You can download it <a href="https://jdk.java.net/19/">here .</a></p><p>The most exciting innovation for me are the <a href="https://www.happycoders.eu/de/java/java-19-features/#Virtual_Threads_Preview">virtual threads , which have been developed as part of</a> <a href="https://openjdk.org/projects/loom/">Project Loom</a> for several years and are now finally included in the JDK as a preview.</p><p>Virtual threads are a requirement for <a href="https://www.happycoders.eu/de/java/java-19-features/#Structured_Concurrency_Incubator">Structured Concurrency</a> , another exciting new Incubator feature in Java 19.</p><p>There is also good news for anyone who wants to access non-Java code (e.g. the C standard library): The <a href="https://www.happycoders.eu/de/java/java-19-features/#Foreign_Function_Memory_API_Preview">Foreign Function &amp; Memory API</a> has now also reached the preview stage after five incubator rounds .</p><p>As always, I use the English names of the JEPs.</p><h2 id="New-System-Properties-for-System-out-and-System-err"><a href="#New-System-Properties-for-System-out-and-System-err" class="headerlink" title="New System Properties for System.out and System.err"></a>New System Properties for System.out and System.err</h2><p>There’s one change that every Java developer should know about that isn’t found in the <a href="https://openjdk.org/projects/jdk/19/">Java 19 Feature Announcements</a> , but rather buried deep in the <a href="https://jdk.java.net/19/release-notes#JDK-8283620">release notes .</a></p><p>If you run an existing application with Java 19, it can happen that you only see question marks on the console instead of umlauts and other special characters.</p><p>This is due to the fact that from Java 19 the standard encoding of the operating system is used for the output - under Windows <code>System.out</code>e.g. <code>System.err</code>“Cp1252”. To switch the output to UTF-8, you need to add the following VM options when calling the application:</p><p><code>-Dstdout.encoding=utf8 -Dstderr.encoding=utf8</code></p><p>If you don’t want to do this every time you start the program, you can also set these settings globally by defining the following environment variable (yes, it starts with an underscore):</p><p><code>_JAVA_OPTIONS=&quot;-Dstdout.encoding=utf8 -Dstderr.encoding=utf8&quot;</code></p><h2 id="New-Methods-to-Create-Preallocated-HashMaps"><a href="#New-Methods-to-Create-Preallocated-HashMaps" class="headerlink" title="New Methods to Create Preallocated HashMaps"></a>New Methods to Create Preallocated HashMaps</h2><p>Traditionally, if we want to create <code>ArrayList</code>a number of elements that is known in advance (e.g. 120), then we can do it like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">120</span>);<br></code></pre></td></tr></table></figure><p>As a result, the <code>ArrayList</code>underlying array is allocated directly for 120 elements and does not have to be enlarged several times (i.e. newly created and copied) in order to insert the 120 elements.</p><p>Likewise, since time immemorial, we can <code>HashMap</code>generate one like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">120</span>);<br></code></pre></td></tr></table></figure><p>Intuitively one would think that there is <code>HashMap</code>room for 120 mappings.</p><p>However, this is not the case!</p><p>Because <code>HashMap</code>it is initialized with a default load factor of 0.75. This means: As soon <code>HashMap</code>as it is 75% full, it will be rebuilt with twice the size (“rehashed”). This is to ensure that the elements <code>HashMap</code>are distributed as evenly as possible across the buckets and that no bucket contains more than one element.</p><p>So the one initialized with a capacity of 120 <code>HashMap</code>can only hold 120 × 0.75 &#x3D; 90 mappings.</p><p>Previously, to create one <code>HashMap</code>for 120 mappings, you had to calculate the capacity yourself by dividing the number of mappings by the load factor: 120 ÷ 0.75 &#x3D; 160.</p><p>So one <code>HashMap</code>for 120 mappings had to be created as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// for 120 mappings: 120 / 0.75 = 160</span><br>Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">160</span>);<br></code></pre></td></tr></table></figure><p>Java 19 makes this easier for us - we can now write the following instead:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Integer&gt; map = HashMap.newHashMap(<span class="hljs-number">120</span>);<br></code></pre></td></tr></table></figure><p>If we look at the source code of the new methods, we see that the end result is the same as what we did manually before:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K, V&gt; HashMap&lt;K, V&gt; <span class="hljs-title function_">newHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> numMappings)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(calculateHashMapCapacity(numMappings));<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateHashMapCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> numMappings)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) Math.ceil(numMappings / (<span class="hljs-type">double</span>) DEFAULT_LOAD_FACTOR);<br>&#125;<br></code></pre></td></tr></table></figure><p>The <code>newHashMap()</code>method has also been built into <code>LinkedHashMap</code>and <code>WeakHashMap</code>.</p><p>There is no JDK Enhancement Proposal for this extension.</p><h2 id="Preview-and-Incubator-features"><a href="#Preview-and-Incubator-features" class="headerlink" title="Preview and Incubator features"></a>Preview and Incubator features</h2><p>Java 19 gives us a total of six preview and incubator features, i.e. features that are not yet finished but can already be tested by the developer community. Community feedback is typically incorporated into the further development and completion of these features.</p><h3 id="Pattern-Matching-for-switch-Third-Preview"><a href="#Pattern-Matching-for-switch-Third-Preview" class="headerlink" title="Pattern Matching for switch (Third Preview)"></a>Pattern Matching for switch (Third Preview)</h3><p>Let’s start with a feature that has already had two preview rounds. The “pattern matching for switch” first introduced in <a href="https://www.happycoders.eu/de/java/java-17-features-de/#Pattern_Matching_for_switch_Preview">Java 17</a> allowed us to write code like the following:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (obj) &#123;<br>  <span class="hljs-keyword">case</span> String s &amp;&amp; s.length() &gt; <span class="hljs-number">5</span> -&gt; System.out.println(s.toUpperCase());<br>  <span class="hljs-keyword">case</span> String s                   -&gt; System.out.println(s.toLowerCase());<br><br>  <span class="hljs-keyword">case</span> Integer i                  -&gt; System.out.println(i * i);<br><br>  <span class="hljs-keyword">default</span> -&gt; &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>We can use it to <code>switch</code>check within a statement whether an object is of a certain class and whether it has other properties (as in the example: longer than 5 characters).</p><p>In Java 19, the syntax of the so-called “Guarded Pattern” (in the example above “ “) was changed with <a href="https://openjdk.org/jeps/427">JDK Enhancement Proposal 427 .</a> The new keyword must now be used <code>String s &amp;&amp; s.length() &gt; 5</code>instead .<code>&amp;&amp;``when</code></p><p>The above example is notated as follows in Java 19:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (obj) &#123;<br>  <span class="hljs-keyword">case</span> String s when s.length() &gt; <span class="hljs-number">5</span> -&gt; System.out.println(s.toUpperCase());<br>  <span class="hljs-keyword">case</span> String s                     -&gt; System.out.println(s.toLowerCase());<br><br>  <span class="hljs-keyword">case</span> Integer i                    -&gt; System.out.println(i * i);<br><br>  <span class="hljs-keyword">default</span> -&gt; &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>when``case</code>is a so-called “contextual keyword” and therefore only has a meaning within a label. If you have variables or methods named “when” in your code, you don’t need to change anything.</p><h3 id="Record-Patterns-Preview"><a href="#Record-Patterns-Preview" class="headerlink" title="Record Patterns (Preview)"></a>Record Patterns (Preview)</h3><p>Staying with the topic “Pattern Matching” we come to the “Record Patterns”. If you are new to Records, I recommend reading the <a href="https://www.happycoders.eu/de/java/java-records/">Records in Java</a> article first .</p><p>The best way to explain what a record pattern is is with an example. Let’s assume we have defined the following record:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Position</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>We also have a <code>print()</code>method that can return any object, including positions:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Object object)</span> &#123;<br>  <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Position position) &#123;<br>    System.out.println(<span class="hljs-string">&quot;object is a position, x = &quot;</span> + position.x() <br>                                         + <span class="hljs-string">&quot;, y = &quot;</span> + position.y());<br>  &#125;<br>  <span class="hljs-comment">// else ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>In case you stumble over the notation used - it was introduced in <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Pattern_Matching_for_instanceof">Java 16</a> as “Pattern Matching for instanceof”.</p><h4 id="Record-pattern-with-instanceof"><a href="#Record-pattern-with-instanceof" class="headerlink" title="Record pattern with instanceof"></a>Record pattern with instanceof</h4><p><a href="https://openjdk.org/jeps/405">As of Java 19, JDK Enhancement Proposal 405</a> allows us to use a so-called “Record Pattern”. With that, we can also write the code as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Object object)</span> &#123;<br>  <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> <span class="hljs-title function_">Position</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;object is a position, x = &quot;</span> + x + <span class="hljs-string">&quot;, y = &quot;</span> + y);<br>  &#125; <br>  <span class="hljs-comment">// else ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Instead <code>Position position</code>of matching “ “ and accessing in the code <code>position</code>below, we now match “ <code>Position(int x, int y)</code>“ and can access and directly in the code <code>x</code>below <code>y</code>.</p><h4 id="Record-pattern-with-switch"><a href="#Record-pattern-with-switch" class="headerlink" title="Record pattern with switch"></a>Record pattern with switch</h4><p><a href="https://www.happycoders.eu/de/java/java-17-features-de/#Pattern_Matching_for_switch_Preview">Since Java 17</a> , we can also <code>switch</code>write the original example as a statement:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Object object)</span> &#123;<br>  <span class="hljs-keyword">switch</span> (object) &#123;<br>    <span class="hljs-keyword">case</span> Position position<br>        -&gt; System.out.println(<span class="hljs-string">&quot;object is a position, x = &quot;</span> + position.x() <br>                                                + <span class="hljs-string">&quot;, y = &quot;</span> + position.y());<br>    <span class="hljs-comment">// other cases ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Since Java 19 we can also use a record pattern in the switch statement:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Object object)</span> &#123;<br>  <span class="hljs-keyword">switch</span> (object) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-title function_">Position</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> <br>        -&gt; System.out.println(<span class="hljs-string">&quot;object is a position, x = &quot;</span> + x + <span class="hljs-string">&quot;, y = &quot;</span> + y);<br><br>    <span class="hljs-comment">// other cases ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Nested-record-patterns"><a href="#Nested-record-patterns" class="headerlink" title="Nested record patterns"></a>Nested record patterns</h4><p>It is also possible to match nested records - I would also like to demonstrate this with an example.</p><p>We first define a second record, <code>Path</code>, with a start and a target position:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">record</span> <span class="hljs-keyword">Path</span>(Position <span class="hljs-keyword">from</span>, Position <span class="hljs-keyword">to</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>Our <code>print()</code>method can now easily output all X and Y coordinates of the path using a record pattern:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Object object)</span> &#123;<br>  <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> <span class="hljs-title function_">Path</span><span class="hljs-params">(Position(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span>, Position(<span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2))) &#123;<br>    System.out.println(<span class="hljs-string">&quot;object is a path, x1 = &quot;</span> + x1 + <span class="hljs-string">&quot;, y1 = &quot;</span> + y1 <br>                                     + <span class="hljs-string">&quot;, x2 = &quot;</span> + x2 + <span class="hljs-string">&quot;, y2 = &quot;</span> + y2);<br>  &#125;<br>  <span class="hljs-comment">// else ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Alternatively, we can also <code>switch</code>write this as a statement:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Object object)</span> &#123;<br>  <span class="hljs-keyword">switch</span> (object) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-title function_">Path</span><span class="hljs-params">(Position(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span>, Position(<span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2))<br>        -&gt; System.out.println(<span class="hljs-string">&quot;object is a path, x1 = &quot;</span> + x1 + <span class="hljs-string">&quot;, y1 = &quot;</span> + y1 <br>                                            + <span class="hljs-string">&quot;, x2 = &quot;</span> + x2 + <span class="hljs-string">&quot;, y2 = &quot;</span> + y2);<br>    <span class="hljs-comment">// other cases ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Record patterns offer us an elegant way of accessing the elements of a record after a type check.</p><h3 id="Virtual-Threads-Preview"><a href="#Virtual-Threads-Preview" class="headerlink" title="Virtual Threads (Preview)"></a>Virtual Threads (Preview)</h3><p>For me, the most exciting innovation in Java 19 are “Virtual Threads”. These have been developed in <a href="https://openjdk.org/projects/loom/">Project Loom</a> for several years and so far could only be tested with a self-compiled JDK.</p><p>With <a href="https://openjdk.org/jeps/425">JDK Enhancement Proposal 425</a> , virtual threads are finally making their way into the official JDK - directly in preview status, so that no major changes to the API are to be expected.</p><p>Why we need virtual threads, what they are, how they work, and how to use them is a must-read in the <a href="https://www.happycoders.eu/de/java/virtual-threads/">main article on virtual threads</a> .</p><h3 id="Foreign-Function-amp-Memory-API-Preview"><a href="#Foreign-Function-amp-Memory-API-Preview" class="headerlink" title="Foreign Function &amp; Memory API (Preview)"></a>Foreign Function &amp; Memory API (Preview)</h3><p><a href="https://openjdk.org/projects/panama/">Project Panama</a> has been working on a replacement for the cumbersome, error-prone and slow Java Native Interface (JNI) for a long time.</p><p>The “Foreign Memory Access API” and the “Foreign Linker API” were already introduced in <a href="https://www.happycoders.eu/de/java/java-14-features-de/#Foreign-Memory_Access_API_Incubator">Java 14</a> and <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Foreign_Linker_API_Incubator_Foreign-Memory_Access_API_Third_Incubator">Java 16 - both individually at the incubator stage.</a> In <a href="https://www.happycoders.eu/de/java/java-17-features-de/#Foreign_Function_Memory_API_Incubator">Java 17</a> , these APIs were merged into the “Foreign Function &amp; Memory API” (FFM API), which remained in the incubator stage until <a href="https://www.happycoders.eu/de/java/java-18-features-de/#Foreign_Function_Memory_API_Second_Incubator">Java 18 .</a></p><p>In Java 19, the new API with <a href="https://openjdk.org/jeps/424">JDK Enhancement Proposal 424</a> has finally reached the preview stage, which means that only small changes and bug fixes will be made. So it’s time to introduce the new API here!</p><p>The Foreign Function &amp; Memory API enables access to native memory (i.e. memory outside of the Java heap) and access to native code (e.g. C libraries) directly from Java.</p><p>I’ll show you how this works with an example. However, I won’t delve too deeply into the topic here, since most Java developers rarely if ever need to access native memory and code.</p><p>Here’s a simple example that stores a string in off-heap memory and calls the C Standard Library’s “strlen” function on it:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FFMTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">// 1. Get a lookup object for commonly used libraries</span><br>    <span class="hljs-type">SymbolLookup</span> <span class="hljs-variable">stdlib</span> <span class="hljs-operator">=</span> Linker.nativeLinker().defaultLookup();<br><br>    <span class="hljs-comment">// 2. Get a handle to the &quot;strlen&quot; function in the C standard library</span><br>    <span class="hljs-type">MethodHandle</span> <span class="hljs-variable">strlen</span> <span class="hljs-operator">=</span> Linker.nativeLinker().downcallHandle(<br>        stdlib.lookup(<span class="hljs-string">&quot;strlen&quot;</span>).orElseThrow(), <br>        FunctionDescriptor.of(JAVA_LONG, ADDRESS));<br><br>    <span class="hljs-comment">// 3. Convert Java String to C string and store it in off-heap memory</span><br>    <span class="hljs-type">MemorySegment</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> implicitAllocator().allocateUtf8String(<span class="hljs-string">&quot;Happy Coding!&quot;</span>);<br><br>    <span class="hljs-comment">// 4. Invoke the foreign function</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) strlen.invoke(str);<br><br>    System.out.println(<span class="hljs-string">&quot;len = &quot;</span> + len);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>The one in line 9 is interesting <code>FunctionDescriptor</code>: it defines the return type of the function as the first parameter and the arguments of the function as additional parameters. This <code>FunctionDescriptor</code>ensures that all Java types are properly converted to C types and vice versa.</p><p>Since the FFM API is still in the preview state, a few additional parameters must be specified to compile and start it:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">$ javac --enable-preview -source <span class="hljs-number">19</span> FFMTest.java<br>$ java --enable-preview FFMTestCode language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>Anyone who has worked with JNI before - and remembers how much Java and C boilerplate code it took to write and keep in sync - will see that the overhead of calling the native function has been reduced by orders of magnitude.</p><p>If you want to delve deeper into the subject: in the <a href="https://openjdk.org/jeps/424">JEP</a> you will find further, more complex examples.</p><h3 id="Structured-Concurrency-Incubator"><a href="#Structured-Concurrency-Incubator" class="headerlink" title="Structured Concurrency (Incubator)"></a>Structured Concurrency (Incubator)</h3><p>If a task consists of different subtasks that can be completed in parallel (e.g. accessing data from a database, calling a remote API and loading a file), we were previously able to use the Java Executur Framework for this.</p><p>That could then e.g. look like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br><br><span class="hljs-keyword">public</span> Invoice <span class="hljs-title function_">createInvoice</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId, <span class="hljs-type">int</span> customerId, String language)</span><br>    <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>  Future&lt;Order&gt; orderFuture =<br>      executor.submit(() -&gt; loadOrderFromOrderService(orderId));<br><br>  Future&lt;Customer&gt; customerFuture =<br>      executor.submit(() -&gt; loadCustomerFromDatabase(customerId));<br><br>  Future&lt;String&gt; invoiceTemplateFuture =<br>      executor.submit(() -&gt; loadInvoiceTemplateFromFile(language));<br><br>  <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderFuture.get();<br>  <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> customerFuture.get();<br>  <span class="hljs-type">String</span> <span class="hljs-variable">invoiceTemplate</span> <span class="hljs-operator">=</span> invoiceTemplateFuture.get();<br><br>  <span class="hljs-keyword">return</span> Invoice.generate(order, customer, invoiceTemplate);<br>&#125;<br></code></pre></td></tr></table></figure><p>We pass the three subtasks to the executor and wait for the subresults. The Happy Path is implemented quickly. But how do we handle exceptions?</p><ul><li>If one subtask fails, how can we kill the others?</li><li>How can we cancel the subtasks when the entire calculation is no longer needed?</li></ul><p>Both are possible, but require fairly complex, hard-to-maintain code.</p><p>And what if we want to debug code of this kind? A thread dump e.g. B. would give us tons of threads named “pool-X-thread-Y” - but we wouldn’t know which pool thread belongs to which calling thread, since all calling threads share the executor’s thread pool.</p><p><a href="https://openjdk.org/jeps/428">JDK Enhancement Proposal 428</a> introduces an API for so-called “structured concurrency”, a concept intended to improve the implementation, readability and maintainability of code for requirements of this type.</p><p>Using a <code>StructuredTaskScope</code>we can rewrite the example as of Java 19 as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">Invoice <span class="hljs-title function_">createInvoice</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId, <span class="hljs-type">int</span> customerId, String language)</span><br>    <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>  <span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">scope</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StructuredTaskScope</span>.ShutdownOnFailure()) &#123;<br>    Future&lt;Order&gt; orderFuture =<br>        scope.fork(() -&gt; loadOrderFromOrderService(orderId));<br><br>    Future&lt;Customer&gt; customerFuture =<br>        scope.fork(() -&gt; loadCustomerFromDatabase(customerId));<br><br>    Future&lt;String&gt; invoiceTemplateFuture =<br>        scope.fork(() -&gt; loadInvoiceTemplateFromFile(language));<br><br>    scope.join();<br>    scope.throwIfFailed();<br><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderFuture.resultNow();<br>    <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> customerFuture.resultNow();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">invoiceTemplate</span> <span class="hljs-operator">=</span> invoiceTemplateFuture.resultNow();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoice</span>(order, customer, invoiceTemplate);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>So we replace the one in the scope of the class <code>ExecutorService</code>with one in the scope of the method <code>StructuredTaskScope</code>– and <code>executor.submit()</code>with <code>scope.fork()</code>.</p><p>With <code>scope.join()</code>we wait for all tasks to be completed - or at least one has failed or been canceled. In the latter two cases, the subsequent throws <code>throwIfFailed()</code>a <code>ExecutionException</code>or a <code>CancellationException</code>.</p><p>The new approach brings the following improvements over the old one:</p><ul><li>Task and subtasks form a self-contained unit in the code - there is no <code>ExecutorService</code>one in a higher scope. The threads don’t come from a thread pool; instead, each subtask runs in a new <a href="https://www.happycoders.eu/de/java/virtual-threads/">virtual thread</a> .</li><li>As soon as an error occurs in one of the subtasks, all other subtasks are aborted.</li><li>If the calling thread is aborted, the subtasks are also aborted.</li><li>The thread dump shows the call hierarchy between the calling thread and the threads that execute the subtasks.</li></ul><p>If you want to try the example yourself: Preview features must be explicitly activated and Incubator modules must be explicitly added to the module path. For example, if you saved the code in a file named <code>StructuredConcurrencyTest.java</code>, you can compile and run it like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">$ javac --enable-preview -source <span class="hljs-number">19</span> --add-modules jdk.incubator.concurrent StructuredConcurrencyTest.java<br>$ java --enable-preview --add-modules jdk.incubator.concurrent StructuredConcurrencyTestCode language:  Plaintext  ( plaintext )<br></code></pre></td></tr></table></figure><p>Please note that Incubator features are still subject to major changes.</p><h3 id="Vector-API-Fourth-Incubator"><a href="#Vector-API-Fourth-Incubator" class="headerlink" title="Vector API (Fourth Incubator)"></a>Vector API (Fourth Incubator)</h3><p>The new Vector API has nothing <code>java.util.Vector</code>to do with the class. In fact, it’s about a new API for mathematical vector calculations and their mapping to modern SIMD (single-instruction-multiple-data) CPUs.</p><p>The Vector API has been part of the JDK as an incubator since <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Vector_API_Incubator">Java 16 and was further developed in</a> <a href="https://www.happycoders.eu/de/java/java-17-features-de/#Vector_API_Second_Incubator">Java 17</a> and <a href="https://www.happycoders.eu/de/java/java-18-features-de/#Vector_API_Third_Incubator">Java 18</a> .</p><p>With <a href="https://openjdk.org/jeps/426">JDK Enhancement Proposal 426</a> , Java 19 delivers the fourth iteration in which the API has been extended to include new vector operations - as well as the ability to store vectors in memory segments (a feature of the <a href="https://www.happycoders.eu/de/java/java-19-features/#Foreign_Function_Memory_API_Preview">Foreign Function &amp; Memory API</a> ) and read them from them.</p><p>Incubator features are still subject to significant changes, so I won’t detail the API here. I’ll catch up on that once the Vector API has transitioned to preview status.</p><h2 id="Deprecations-and-Deletion"><a href="#Deprecations-and-Deletion" class="headerlink" title="Deprecations and Deletion"></a>Deprecations and Deletion</h2><p>In Java 19, some features were marked as “deprecated” or deprecated.</p><h3 id="Deprecation-of-Locale-class-constructors"><a href="#Deprecation-of-Locale-class-constructors" class="headerlink" title="Deprecation of Locale class constructors"></a>Deprecation of Locale class constructors</h3><p>In Java 19, the public constructors of the <code>Locale</code>class have been marked as “deprecated”.</p><p>Instead, we should use the new static factory method <code>Locale.of()</code>. This ensures that there is <code>Locale</code>only one instance per configuration.</p><p>The following example shows the usage of the factory method versus the constructor:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Locale</span> <span class="hljs-variable">german1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(<span class="hljs-string">&quot;en&quot;</span>); <span class="hljs-comment">// deprecated</span><br><span class="hljs-type">Locale</span> <span class="hljs-variable">germany1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(<span class="hljs-string">&quot;en&quot;</span>, <span class="hljs-string">&quot;EN&quot;</span>); <span class="hljs-comment">// deprecated</span><br><br><span class="hljs-type">Locale</span> <span class="hljs-variable">german2</span> <span class="hljs-operator">=</span> Locale.of(<span class="hljs-string">&quot;en&quot;</span>);<br><span class="hljs-type">Locale</span> <span class="hljs-variable">germany2</span> <span class="hljs-operator">=</span> Locale.of(<span class="hljs-string">&quot;en&quot;</span>, <span class="hljs-string">&quot;EN&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;us1  == Locale.ENGLISH  = &quot;</span> + (us1 == Locale.ENGLISH));<br>System.out.println(<span class="hljs-string">&quot;us1 == Locale.GERMANY = &quot;</span> + (us1 == Locale.ENGLISH));<br>System.out.println(<span class="hljs-string">&quot;us2  == Locale.GERMAN  = &quot;</span> + (us2 == Locale.ENGLISH));<br>System.out.println(<span class="hljs-string">&quot;us2 == Locale.GERMANY = &quot;</span> + (us2 == Locale.ENGLISH));<br><br></code></pre></td></tr></table></figure><p>If you start this code, you will see that the objects returned via the factory method are identical to the <code>Locale</code>constants - the ones created via the construct are obviously not.</p><h3 id="java-lang-ThreadGroup-is-degraded"><a href="#java-lang-ThreadGroup-is-degraded" class="headerlink" title="java.lang.ThreadGroup is degraded"></a>java.lang.ThreadGroup is degraded</h3><p>In <a href="https://www.happycoders.eu/de/java/java-14-features-de/#Thread_SuspendResume_Are_Deprecated_for_Removal">Java 14</a> and <a href="https://www.happycoders.eu/de/java/java-16-features-de/#Terminally_Deprecated_ThreadGroup_stop_destroy_isDestroyed_setDaemon_and_isDaemon">Java 16</a> , several <code>Thread</code>and <code>ThreadGroup</code>methods were marked as “deprecated for removal”. You can find out why in the linked sections.</p><p>The following of these methods have been deprecated in Java 19:</p><ul><li><code>ThreadGroup.destroy()</code>– the call to this method is ignored.</li><li><code>ThreadGroup.isDestroyed()</code>– always <code>false</code>returns.</li><li><code>ThreadGroup.setDaemon()</code>– sets the <code>daemon</code>flag, but this no longer has any effect.</li><li><code>ThreadGroup.getDaemon()</code>- returns the value of the unused <code>daemon</code>flag.</li><li><code>ThreadGroup.suspend()</code>, <code>resume()</code>and <code>stop()</code>throw a <code>UnsupportedOperationException</code>.</li></ul><h2 id="Other-changes-in-Java-19"><a href="#Other-changes-in-Java-19" class="headerlink" title="Other changes in Java 19"></a>Other changes in Java 19</h2><p>In this section you will find changes&#x2F;enhancements that may not be relevant to all Java developers.</p><h3 id="Linux-x2F-RISC-V-Port"><a href="#Linux-x2F-RISC-V-Port" class="headerlink" title="Linux&#x2F;RISC-V Port"></a>Linux&#x2F;RISC-V Port</h3><p>Due to the increasing spread of RISC-V hardware, a port for the corresponding architecture was made available with <a href="https://openjdk.org/jeps/422">JEP 422 .</a></p><h3 id="Complete-list-of-all-changes-in-Java-19"><a href="#Complete-list-of-all-changes-in-Java-19" class="headerlink" title="Complete list of all changes in Java 19"></a>Complete list of all changes in Java 19</h3><p>In addition to the JDK Enhancement Proposals (JEPs) and class library changes presented in this article, there are numerous minor changes that are beyond the scope of this article. <a href="https://jdk.java.net/19/release-notes">See the JDK 19 Release Notes</a> for a full list .</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><a href="https://www.happycoders.eu/de/java/virtual-threads/">In Java 19, the long-awaited virtual threads</a> developed in Project Loom have finally found their way into the JDK (albeit initially in preview stage). I hope you’re as excited as I am and can’t wait to start using virtual threads in your projects!</p><p>Based on this, structured concurrency (still in the incubator stage) will significantly simplify the management of tasks that are divided into parallel subtasks.</p><p>Record patterns have been added to the pattern matching options in <code>instanceof</code>and that have been gradually developed in the last JDK versions .<code>switch</code></p><p>The preview and incubator features “Pattern Matching for switch”, “Foreign Function &amp; Memory API” and “Vector API” have been sent to the next preview or incubator round.</p><p>By default, the output on the console is in the standard encoding of the operating system and may have to be changed using the VM option.</p><p>HashMaps offer new factory methods to create maps with enough capacity for a given number of mappings.</p><p>As always, various other changes round off the release. You can download Java 19 <a href="https://jdk.java.net/19/">here .</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Liskov Substitution Principle Explained</title>
    <link href="/2022/11/11/lsp/"/>
    <url>/2022/11/11/lsp/</url>
    
    <content type="html"><![CDATA[<p>This article gives a quick intro to the Liskov Substitution Principle (LSP), why it’s important, and how to use it to validate object-oriented designs. We’ll also see some examples and learn how to correctly identify and fix violations of the LSP.</p><h3 id="What-is-the-LSP"><a href="#What-is-the-LSP" class="headerlink" title="What is the LSP?"></a>What is the LSP?</h3><p>At a high level, the LSP states that in an object-oriented program, if we substitute a superclass object reference with an object of any of its subclasses, the program should not break.</p><p>Say we had a method that used a superclass object reference to do something:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeClass</span> &#123;<br>  <br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">aMethod</span><span class="hljs-params">(SuperClass superClassReference)</span> &#123;<br>    doSomething(superClassReference);<br>  &#125;<br>  <br>  <span class="hljs-comment">// definition of doSomething() omitted</span><br>&#125;<br></code></pre></td></tr></table></figure><p>This should work as expected for every possible subclass object of SuperClass that is passed to it. If substituting a superclass object with a subclass object changes the program behavior in unexpected ways, the LSP is violated.</p><p>The LSP is applicable when there’s a supertype-subtype inheritance relationship by either extending a class or implementing an interface. </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">We can think <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> methods defined <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> supertype <span class="hljs-keyword">as</span> defining <span class="hljs-keyword">a</span> contract. Every subtype is expected <span class="hljs-built_in">to</span> stick <span class="hljs-built_in">to</span> this contract. If <span class="hljs-keyword">a</span> subclass does <span class="hljs-keyword">not</span> adhere <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> superclass’s contract, <span class="hljs-keyword">it</span>’s violating <span class="hljs-keyword">the</span> LSP.<br></code></pre></td></tr></table></figure><p>This makes sense intuitively - a class’s contract tells its clients what to expect. If a subclass extends or overrides the behavior of the superclass in unintended ways, it would break the clients.</p><p>How can a method in a subclass break a superclass method’s contract? There are several possible ways:</p><ol><li>Returning an object that’s incompatible with the object returned by the superclass method.</li><li>Throwing a new exception that’s not thrown by the superclass method.</li><li>Changing the semantics or introducing side effects that are not part of the superclass’s contract.</li></ol><p>Java and other statically-typed languages prevent 1 (unless we use very generic classes like Object) and 2 (for checked exceptions) by flagging them at compile-time. It’s still possible to violate the LSP in these languages via the third way.</p><h4 id="Why-is-the-LSP-Important"><a href="#Why-is-the-LSP-Important" class="headerlink" title="Why is the LSP Important?"></a>Why is the LSP Important?</h4><p>LSP violations are a design smell. We may have generalized a concept prematurely and created a superclass where none is needed.<br>Future requirements for the concept might not fit the class hierarchy we have created.</p><p>If client code cannot substitute a superclass reference with a subclass object freely, it would be forced to do instanceof checks and specially handle some subclasses.<br>If this kind of conditional code is spread across the codebase, it will be difficult to maintain.</p><p>Every time we add or modify a subclass, we would have to comb through the codebase and change multiple places. This is difficult and error-prone.</p><p>It also defeats the purpose of introducing the supertype abstraction in the first place which is to make it easy to enhance the program.</p><p>It may not even be possible to identify all the places and change them - we may not own or control the client code. We could be developing our functionality as a library and providing them to external users, for example.</p><h4 id="Violating-the-LSP-An-Example"><a href="#Violating-the-LSP-An-Example" class="headerlink" title="Violating the LSP - An Example"></a>Violating the LSP - An Example</h4><p>Suppose we were building the payment module for our eCommerce website. Customers order products on the site and pay using payment instruments like a credit card or a debit card.</p><blockquote><p>When a customer provides their card details, we want to</p><ul><li>validate it,</li><li>run it through a third-party fraud detection system,</li><li>and then send the details to a payment gateway for processing.</li></ul></blockquote><p>While some basic validations are required on all cards, there are additional validations needed on credit cards. Once the payment is done, we record it in our database. Because of various security and regulatory reasons, we don’t store the actual card details in our database, but a fingerprint identifier for it that’s returned by the payment gateway.</p><p>Given these requirements, we might model our classes as below:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentInstrument</span> &#123;<br>  String name;<br>  String cardNumber;<br>  String verificationCode;<br>  Date expiryDate;<br>  String fingerprint;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException &#123;<br>    <span class="hljs-comment">// basic validation on name, expiryDate etc.</span><br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span> || name.isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentInstrumentInvalidException</span>(<span class="hljs-string">&quot;Name is invalid&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// other validations</span><br>  &#125;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">runFraudChecks</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FraudDetectedException &#123;<br>    <span class="hljs-comment">// run checks against a third-party system</span><br>  &#125;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToPaymentGateway</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentFailedException &#123;<br>    <span class="hljs-comment">// send details to payment gateway (PG) and set fingerprint from </span><br>    <span class="hljs-comment">// the payment gateway response</span><br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreditCard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PaymentInstrument</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException &#123;<br>    <span class="hljs-built_in">super</span>.validate();<br>    <span class="hljs-comment">// additional validations for credit cards</span><br>  &#125;  <br>  <span class="hljs-comment">// other credit card-specific code</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DebitCard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PaymentInstrument</span> &#123; <br>  <span class="hljs-comment">// debit card-specific code</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A different area in our codebase where we process a payment might look something like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentProcessor</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(OrderDetails orderDetails, PaymentInstrument paymentInstrument)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      paymentInstrument.validate();<br>      paymentInstrument.runFraudChecks();<br>      paymentInstrument.sendToPaymentGateway();<br>      saveToDatabase(orderDetails, paymentInstrument);<br>    &#125; <span class="hljs-keyword">catch</span> (...)&#123;<br>        <span class="hljs-comment">// exception handling</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveToDatabase</span><span class="hljs-params">(</span><br><span class="hljs-params">      OrderDetails orderDetails, </span><br><span class="hljs-params">      PaymentInstrument paymentInstrument)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fingerprint</span> <span class="hljs-operator">=</span> paymentInstrument.getFingerprint();<br>    <span class="hljs-comment">// save fingerprint and order details in DB</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Of course, in an actual production system, there would be many complex aspects to handle. The single processor class above might well be a bunch of classes in multiple packages across service and repository layers.</p><p>All is well and our system is processing payments as expected. At some point, the marketing team decides to introduce reward points to increase customer loyalty. Customers get a small number of reward points for each purchase. They can use the points to buy products on the site.</p><p>Ideally, we should be able to just add a <em><strong>RewardsCard</strong></em> class that extends <em><strong>PaymentInstrument</strong></em> and be done with it. But we find that adding it violates the LSP!</p><p>There are no fraud checks for Rewards Cards. Details are not sent to payment gateways and there is no concept of a fingerprint identifier.<br><em><strong>PaymentProcessor</strong></em> breaks as soon as we add <em><strong>RewardsCard</strong></em>.</p><p>We might try force-fitting <em><strong>RewardsCard</strong></em> into the current class hierarchy by overriding <em><strong>runFraudChecks()</strong></em> and <em><strong>sendToPaymentGateway()</strong></em> with empty, do-nothing implementations.</p><p>This would still break the application - we might get a <em><strong>NullPointerException</strong></em> from the <em><strong>saveToDatabase()</strong></em> method since the fingerprint would be null. Can we handle it just this once as a special case in <em><strong>saveToDatabase()</strong></em> by doing an ***instanceofv check on the <em><strong>PaymentInstrument</strong></em> argument?</p><p>But we know that if we do it once, we’ll do it again. Soon our codebase will be strewn with multiple checks and special cases to handle the problems created by the incorrect class model. We can imagine the pain this will cause each time we enhance the payment module.</p><p>For example, what if the business decides to accept Bitcoins? Or marketing introduces a new payment mode like Cash on Delivery?</p><h4 id="Fixing-the-Design"><a href="#Fixing-the-Design" class="headerlink" title="Fixing the Design"></a>Fixing the Design</h4><p>Let’s revisit the design and create supertype abstractions only if they are general enough to create code that is flexible to requirement changes. We will also use the following object-oriented design principles:</p><blockquote><ul><li>Program to interface, not implementation</li><li>Encapsulate what varies</li><li>Prefer composition over inheritance</li></ul></blockquote><p>To start with, what we can be sure of is that our application needs to collect payment - both at present and in the future. It’s also reasonable to think that we would want to validate whatever payment details we collect. Almost everything else could change. So let’s define the below interfaces:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentInstrument</span>&#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException;<br>  PaymentResponse <span class="hljs-title function_">collectPayment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentFailedException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentResponse</span> &#123;<br>  String identifier;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PaymentResponse</strong> encapsulates an <strong>identifier</strong> - this could be the fingerprint for credit and debit cards or the card number for rewards cards.<br>It could be something else for a different payment instrument in the future. The encapsulation ensures <strong>PaymentInstrument</strong> can remain unchanged if future payment instruments have more data.</p><p><strong>PaymentProcessor</strong> class now looks like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentProcessor</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(</span><br><span class="hljs-params">      OrderDetails orderDetails, </span><br><span class="hljs-params">      PaymentInstrument paymentInstrument)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      paymentInstrument.validate();<br>      <span class="hljs-type">PaymentResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> paymentInstrument.collectPayment();<br>      saveToDatabase(orderDetails, response.getIdentifier());<br>    &#125; <span class="hljs-keyword">catch</span> (...) &#123;<br>      <span class="hljs-comment">// exception handling</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveToDatabase</span><span class="hljs-params">(OrderDetails orderDetails, String identifier)</span> &#123;<br>    <span class="hljs-comment">// save the identifier and order details in DB</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>There are no <strong>runFraudChecks()</strong> and <strong>sendToPaymentGateway()</strong> calls in <strong>PaymentProcessor</strong> anymore - these are not general enough to apply to all payment instruments.</p><p>Let’s add a few more interfaces for other concepts which seem general enough in our problem domain:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">FraudChecker</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">runChecks</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FraudDetectedException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentGatewayHandler</span> &#123;<br>  PaymentGatewayResponse <span class="hljs-title function_">handlePayment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentFailedException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentInstrumentValidator</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentGatewayResponse</span> &#123;<br>  String fingerprint;<br>&#125;<br></code></pre></td></tr></table></figure><p>And here are the implementations:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThirdPartyFraudChecker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FraudChecker</span> &#123;<br>  <span class="hljs-comment">// members omitted</span><br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">runChecks</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FraudDetectedException &#123;<br>    <span class="hljs-comment">// external system call omitted</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentGatewayHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentGatewayHandler</span> &#123;<br>  <span class="hljs-comment">// members omitted</span><br>  <br>  <span class="hljs-meta">@Override</span><br>  PaymentGatewayResponse <span class="hljs-title function_">handlePayment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentFailedException &#123;<br>    <span class="hljs-comment">// send details to payment gateway (PG), set the fingerprint</span><br>    <span class="hljs-comment">// received from PG on a PaymentGatewayResponse and return</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BankCardBasicValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentInstrumentValidator</span> &#123;<br>  <span class="hljs-comment">// members like name, cardNumber etc. omitted</span><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException &#123;<br>    <span class="hljs-comment">// basic validation on name, expiryDate etc.</span><br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span> || name.isEmpty()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentInstrumentInvalidException</span>(<span class="hljs-string">&quot;Name is invalid&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// other basic validations</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Let’s build <strong>CreditCard</strong> and <strong>DebitCard</strong> abstractions by composing the above building blocks in different ways.<br>We first define a class that implements <strong>PaymentInstrument</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseBankCard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentInstrument</span> &#123;<br>  <span class="hljs-comment">// members like name, cardNumber etc. omitted</span><br>  <span class="hljs-comment">// below dependencies will be injected at runtime</span><br>  PaymentInstrumentValidator basicValidator;<br>  FraudChecker fraudChecker;<br>  PaymentGatewayHandler gatewayHandler;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException &#123;<br>    basicValidator.validate();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  PaymentResponse <span class="hljs-title function_">collectPayment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentFailedException &#123;<br>    <span class="hljs-type">PaymentResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentResponse</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>      fraudChecker.runChecks();<br>      <span class="hljs-type">PaymentGatewayResponse</span> <span class="hljs-variable">pgResponse</span> <span class="hljs-operator">=</span> gatewayHandler.handlePayment();<br>      response.setIdentifier(pgResponse.getFingerprint());<br>    &#125; <span class="hljs-keyword">catch</span> (FraudDetectedException e) &#123;<br>      <span class="hljs-comment">// exception handling</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreditCard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBankCard</span> &#123;<br>  <span class="hljs-comment">// constructor omitted</span><br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException &#123;<br>    basicValidator.validate();<br>    <span class="hljs-comment">// additional validations for credit cards</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DebitCard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBankCard</span> &#123;<br>  <span class="hljs-comment">// constructor omitted</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Though <strong>CreditCard</strong> and <strong>DebitCard</strong> extend a class, it’s not the same as before.<br>Other areas of our codebase now depend only on the <strong>PaymentInstrument</strong> interface, not on <strong>BaseBankCard</strong>.<br>Below snippet shows <strong>CreditCard</strong> object creation and processing:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PaymentGatewayHandler</span> <span class="hljs-variable">gatewayHandler</span> <span class="hljs-operator">=</span> <br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentGatewayHandler</span>(name, cardNum, code, expiryDate);<br><br><span class="hljs-type">PaymentInstrumentValidator</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> <br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankCardBasicValidator</span>(name, cardNum, code, expiryDate);<br><br><span class="hljs-type">FraudChecker</span> <span class="hljs-variable">fraudChecker</span> <span class="hljs-operator">=</span> <br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThirdPartyFraudChecker</span>(name, cardNum, code, expiryDate);<br><br><span class="hljs-type">CreditCard</span> <span class="hljs-variable">card</span> <span class="hljs-operator">=</span> <br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreditCard</span>(<br>    name,<br>    cardNum,<br>    code,<br>    expiryDate,<br>    validator,<br>    fraudChecker,<br>    gatewayHandler);<br><br>paymentProcessor.process(order, card);<br></code></pre></td></tr></table></figure><p>Our design is now <strong>flexible enough</strong> to let us add a <strong>RewardsCard</strong> - no force-fitting and no conditional checks.<br>We just add the new class and it works as expected.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RewardsCard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentInstrument</span> &#123;<br>  String name;<br>  String cardNumber;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentInstrumentInvalidException &#123;<br>    <span class="hljs-comment">// Rewards card related validations</span><br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  PaymentResponse <span class="hljs-title function_">collectPayment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PaymentFailedException &#123;<br>    <span class="hljs-type">PaymentResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentResponse</span>();<br>    <span class="hljs-comment">// Steps related to rewards card payment like getting current </span><br>    <span class="hljs-comment">// rewards balance, updating balance etc.</span><br>    response.setIdentifier(cardNumber);<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>And here’s client code using the new card:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RewardsCard</span> <span class="hljs-variable">card</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RewardsCard</span>(name, cardNum);<br>paymentProcessor.process(order, card);<br></code></pre></td></tr></table></figure><h4 id="Here-is-the-final-class-diagram"><a href="#Here-is-the-final-class-diagram" class="headerlink" title="Here is the final class diagram"></a>Here is the final class diagram</h4><p><img src="/images/ldp-bank-class-diagram.png" alt="final-class-diagram"></p><h4 id="Advantages-of-the-New-Design"><a href="#Advantages-of-the-New-Design" class="headerlink" title="Advantages of the New Design"></a>Advantages of the New Design</h4><p>The new design not only fixes the LSP violation but also gives us a loosely-coupled, flexible set of classes to handle changing requirements.<br>For example, adding new payment instruments like Bitcoin and Cash on Delivery is easy - we just add new classes that implement <strong>PaymentInstrument</strong>.</p><p>Business needs debit cards to be processed by a different payment gateway? No problem - we add a new class that implements <strong>PaymentGatewayHandler</strong> and inject it into <strong>DebitCard</strong>.<br>If DebitCard’s requirements begin to diverge a lot from CreditCard’s, we can have it implement directly instead of extending <strong>BaseBankCard</strong> - <em>no other class is impacted</em>.</p><p>If we need an in-house fraud check for <strong>RewardsCard</strong>, we add an <strong>InhouseFraudChecker</strong> that implements <strong>FraudChecker</strong>, inject it into <strong>RewardsCard</strong> and only change <strong>RewardsCard.collectPayment()</strong>.</p><h4 id="How-to-Identify-LSP-Violations"><a href="#How-to-Identify-LSP-Violations" class="headerlink" title="How to Identify LSP Violations?"></a>How to Identify LSP Violations?</h4><p>Some good indicators to identify LSP violations are:</p><p>Conditional logic (using the <strong>instanceof</strong> operator or <strong>object.getClass().getName()</strong> to identify the actual <strong>subclass</strong>)<br>in client code empty, do-nothing implementations of one or more methods in subclasses throwing an <strong>UnsupportedOperationException</strong> or some other unexpected exception from a subclass method.</p><p>Consider <strong>java.util.List<E></strong> interface’s <strong>add(E e)</strong> method. Since <strong>java.util.Arrays.asList(T …)</strong> returns an unmodifiable list, client code which adds an element to a List would break if it were passed a List returned by <strong>Arrays.asList</strong>.</p><p>Is this an LSP violation? No - the <strong>List.add(E e)</strong> method’s contract says implementations may throw an <strong>UnsupportedOperationException</strong>. Clients are expected to handle this when using the method.</p><h4 id="Example-output"><a href="#Example-output" class="headerlink" title="Example output"></a>Example output</h4><pre><code class="hljs">Starting payment processing for customer Mehrdad with creadit card number 1234-1234-1234-1234-1234Running fraud checks against third-party systemFraud checks passedSending details to payment gatewayCredit card payment successful!Starting payment processing for customer Mehrdad with rewards card number 1234-1234-1234-1234-1234Updating rewards balanceRewards card payment successful!</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Depth First Search - DFS</title>
    <link href="/2022/11/11/dfs/"/>
    <url>/2022/11/11/dfs/</url>
    
    <content type="html"><![CDATA[<p>A DFS is an algorithm to travers graph-based structures (also for trees included in graphs)<br>in a depth order fashion. </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">DFS <span class="hljs-keyword">is</span> helpful <span class="hljs-keyword">to</span> traverse nodes <span class="hljs-keyword">of</span> a graph only once <span class="hljs-keyword">and</span> you want <span class="hljs-keyword">to</span> go deep <span class="hljs-keyword">in</span> a child <span class="hljs-keyword">from</span> parent node <span class="hljs-keyword">as</span> much <span class="hljs-keyword">as</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> possible.<br></code></pre></td></tr></table></figure><h3 id="Usecases"><a href="#Usecases" class="headerlink" title="Usecases:"></a>Usecases:</h3><p>Before jumping into discussion what DFS is, let’s understand the usecase of DFS.</p><p>Imagine that you are asked to write a basic algorithm for a Chess game. The opponent which can<br>be an AI computer wants to defeat the player. It should decide all available movements for a piece.</p><p>To continue, let’s imagine computer starts with a Pawn. It is obvious the first move<br>only go one or two upfront (just as the beginning of time). If you want to devise a<br>very professional algorithm that stimulate the player, it should predict the other movements after.</p><p>How about the next moves? Computer can decide randomly but have a good play matters to win and challenge the game!</p><p>So for this algorithm we can use start the move in the memory and then see other available movements<br>until no movement is possible and pick the one to prevent defeat fast!</p><p>A pseudo code for our simple algorithm is as follows:</p><p>~<br>pick a piece (pawn here)</p><ol><li>for any available movements in neighbor cells<br> check if movement is possible<br> insert it into a Stack if it was possible</li><li>for any movement in Stack<br> peek the move<br> check if it will be defeated?<br> repeat 1.<br>~</li></ol><p>Now you can see our algorithm is getting toward intelligent movements and can simulate a real opponent.</p><h4 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h4><p>Before going to implement this chess algo let’s DFS.<br>For a DFS we have a Graph (G for instance),and a starting node that we want to start traversing the graph<br>The pseudo code for DFS is like below:</p><h5 id="G-Graph-v-starting-node-can-be-root-node-vertex-node-vertices-nodes"><a href="#G-Graph-v-starting-node-can-be-root-node-vertex-node-vertices-nodes" class="headerlink" title="G: Graph, v: starting node (can be root node) , vertex: node, vertices: nodes"></a>G: Graph, v: starting node (can be root node) , vertex: node, vertices: nodes</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">dfs</span>(G, v):<br>    label v <span class="hljs-keyword">as</span> discovered<br>    <span class="hljs-keyword">for</span> all vertices connected to v<br>        check vertex is not visited before?<br>            call <span class="hljs-title function_">dfs</span>(G,vertex)<br></code></pre></td></tr></table></figure><p>Note that recursive calling acts like a Stack for us.If we want to have iterative approach we will need a stack.<br>Below is the non-recursive implementation or iterative approach for the above pseudo code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">dfs</span>(G, v):<br>    define a stack <br>    put v into stack<br>    <span class="hljs-keyword">while</span> stack is not empty<br>        poll top vertex <span class="hljs-keyword">from</span> stack<br>        label v <span class="hljs-keyword">as</span> discovered<br>        <span class="hljs-keyword">for</span> all vertices connected to v<br>            push vertex into stack<br></code></pre></td></tr></table></figure><p>Imagine we have tree (sort of a simple graph), then you can see the below action when you run the algo against this tree:  </p><p><img src="/source/images/dfs.gif" alt="dfs"></p><h2 id="Implementation-of-Chess-algo"><a href="#Implementation-of-Chess-algo" class="headerlink" title="Implementation of Chess algo"></a>Implementation of Chess algo</h2><p>Now Let’s see how to we can implement the chess algo in Java using DFS.</p><p>There are two ways to implement the DFS:</p><ul><li>Recursive approach</li><li>Iterative approach</li></ul><p>I will implement the recursive approach.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br></code></pre></td></tr></table></figure><p>I will implement the iterative approach.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Stack</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DFS</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vertex</span> &#123;<br>        private final <span class="hljs-title class_">String</span> cell;<br><br>        <span class="hljs-title class_">Vertex</span>(<span class="hljs-title class_">String</span> cell) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">cell</span> = cell;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span> &#123;<br>        public final <span class="hljs-title class_">Vertex</span> vertex;<br>        public final <span class="hljs-title class_">Tree</span> left;<br>        public final <span class="hljs-title class_">Tree</span> right;<br>        public boolean visited;<br><br>        private <span class="hljs-title class_">Tree</span>(<span class="hljs-title class_">Builder</span> builder) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span> = builder.<span class="hljs-title function_">getLeft</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span> = builder.<span class="hljs-title function_">getRight</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">vertex</span> = builder.<span class="hljs-title function_">getValue</span>();<br>        &#125;<br><br>        public <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>            private <span class="hljs-title class_">Tree</span> left, right;<br>            private final <span class="hljs-title class_">Vertex</span> value;<br><br>            public <span class="hljs-title class_">Builder</span>(<span class="hljs-title class_">Vertex</span> vertex) &#123;<br>                value = vertex;<br>            &#125;<br><br>            public <span class="hljs-keyword">static</span> <span class="hljs-title class_">Builder</span> <span class="hljs-title function_">builder</span>(<span class="hljs-params">Vertex vertex</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Builder</span>(vertex);<br>            &#125;<br><br>            public <span class="hljs-title class_">Builder</span> <span class="hljs-title function_">setLeft</span>(<span class="hljs-params">Tree left</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span> = left;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>            &#125;<br><br>            public <span class="hljs-title class_">Builder</span> <span class="hljs-title function_">setRight</span>(<span class="hljs-params">Tree right</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span> = right;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>            &#125;<br><br>            public <span class="hljs-title class_">Tree</span> <span class="hljs-title function_">getLeft</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> left;<br>            &#125;<br><br>            public <span class="hljs-title class_">Tree</span> <span class="hljs-title function_">getRight</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> right;<br>            &#125;<br><br>            public <span class="hljs-title class_">Vertex</span> <span class="hljs-title function_">getValue</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br><br>            <span class="hljs-title class_">Tree</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(<span class="hljs-variable language_">this</span>);<br>            &#125;<br>        &#125;<br><br>        public <span class="hljs-title class_">Vertex</span> <span class="hljs-title function_">getVertex</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> vertex;<br>        &#125;<br><br>        public <span class="hljs-title class_">Tree</span> <span class="hljs-title function_">getRight</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> right;<br>        &#125;<br><br>        public <span class="hljs-title class_">Tree</span> <span class="hljs-title function_">getLeft</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> left;<br>        &#125;<br>    &#125;<br><br>    public <span class="hljs-title function_">DFS</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Tree</span> tree = <span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;2&quot;</span>))<br>                .<span class="hljs-title function_">setLeft</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;3&quot;</span>))<br>                        .<span class="hljs-title function_">setLeft</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;4&quot;</span>)).<span class="hljs-title function_">build</span>())<br>                        .<span class="hljs-title function_">setRight</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;1&quot;</span>)).<span class="hljs-title function_">build</span>())<br>                        .<span class="hljs-title function_">build</span>()<br>                )<br>                .<span class="hljs-title function_">setRight</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;10&quot;</span>)).<span class="hljs-title function_">build</span>())<br>                .<span class="hljs-title function_">build</span>();<br><br>        <span class="hljs-title class_">Tree</span> tree2 = <span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;1&quot;</span>))<br>                .<span class="hljs-title function_">setLeft</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;2&quot;</span>))<br>                        .<span class="hljs-title function_">setLeft</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;3&quot;</span>))<br>                                .<span class="hljs-title function_">setLeft</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;4&quot;</span>)).<span class="hljs-title function_">build</span>())<br>                                .<span class="hljs-title function_">setRight</span>(<span class="hljs-title class_">Tree</span>.<span class="hljs-property">Builder</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(<span class="hljs-string">&quot;5&quot;</span>)).<span class="hljs-title function_">build</span>())<br>                                .<span class="hljs-title function_">build</span>())<br>                        .<span class="hljs-title function_">build</span>()).<span class="hljs-title function_">build</span>();<br> <br>        <span class="hljs-title class_">Stack</span>&lt;<span class="hljs-title class_">Tree</span>&gt; vertices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        vertices.<span class="hljs-title function_">push</span>(tree);<br>        vertices.<span class="hljs-title function_">push</span>(tree2);<br>        <span class="hljs-keyword">while</span> (!vertices.<span class="hljs-title function_">isEmpty</span>()) &#123;<br>            <span class="hljs-title class_">Tree</span> topNode = vertices.<span class="hljs-title function_">pop</span>();<br>            <span class="hljs-keyword">if</span> (!topNode.<span class="hljs-property">visited</span>) &#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(topNode.<span class="hljs-property">vertex</span>.<span class="hljs-property">cell</span>);<br>            &#125;<br>            topNode.<span class="hljs-property">visited</span> = <span class="hljs-literal">true</span>;<br>            <span class="hljs-title class_">Tree</span> leftChild = topNode.<span class="hljs-property">left</span>;<br>            <span class="hljs-title class_">Tree</span> rightChild = topNode.<span class="hljs-property">right</span>;<br>            <span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span> &amp;&amp; !rightChild.<span class="hljs-property">visited</span>) &#123;<br>                vertices.<span class="hljs-title function_">push</span>(rightChild);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span> &amp;&amp; !leftChild.<span class="hljs-property">visited</span>) &#123;<br>                vertices.<span class="hljs-title function_">push</span>(leftChild);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_">DFS</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Another example using Graph</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepthFirstSearch</span> &#123;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Vertex</span> v1 = <span class="hljs-title class_">Vertex</span>.<span class="hljs-title function_">build</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-title class_">Vertex</span> v2 = <span class="hljs-title class_">Vertex</span>.<span class="hljs-title function_">build</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-title class_">Vertex</span> v3 = <span class="hljs-title class_">Vertex</span>.<span class="hljs-title function_">build</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>        <span class="hljs-title class_">Vertex</span> v4 = <span class="hljs-title class_">Vertex</span>.<span class="hljs-title function_">build</span>(<span class="hljs-string">&quot;4&quot;</span>);<br>        <span class="hljs-title class_">Vertex</span> v5 = <span class="hljs-title class_">Vertex</span>.<span class="hljs-title function_">build</span>(<span class="hljs-string">&quot;5&quot;</span>);<br><br>        v1.<span class="hljs-title function_">setConnection</span>(v2.<span class="hljs-title function_">setConnection</span>(v3, v4), v5);<br>        <span class="hljs-title function_">dfs</span>(v1);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">Vertex root</span>) &#123;<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Vertex</span>&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-title class_">Stack</span>&lt;<span class="hljs-title class_">Vertex</span>&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.<span class="hljs-title function_">push</span>(root);<br>        <span class="hljs-keyword">while</span> (!stack.<span class="hljs-title function_">empty</span>()) &#123;<br>            <span class="hljs-title class_">Vertex</span> top = stack.<span class="hljs-title function_">pop</span>();<br>            <span class="hljs-keyword">if</span> (!visited.<span class="hljs-title function_">contains</span>(top)) &#123;<br>                visited.<span class="hljs-title function_">add</span>(top);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (top.<span class="hljs-property">vertices</span> != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Vertex</span> vertex : top.<span class="hljs-property">vertices</span>) &#123;<br>                    stack.<span class="hljs-title function_">push</span>(vertex);<br>                &#125;<br>            &#125;<br>        &#125;<br>        visited.<span class="hljs-title function_">forEach</span>(vertex -&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(vertex.<span class="hljs-property">cell</span>));<br>    &#125;<br><br>    private <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br>        private final <span class="hljs-title class_">Vertex</span> root;<br><br>        <span class="hljs-title class_">Graph</span>(<span class="hljs-title class_">Vertex</span> root) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = root;<br>        &#125;<br>    &#125;<br><br>    private <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vertex</span> &#123;<br>        private final <span class="hljs-title class_">String</span> cell;<br>        private <span class="hljs-title class_">Vertex</span>[] vertices;<br><br>        private <span class="hljs-title class_">Vertex</span>(<span class="hljs-title class_">String</span> cell) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">cell</span> = cell;<br>        &#125;<br><br>        <span class="hljs-keyword">static</span> <span class="hljs-title class_">Vertex</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> cell</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vertex</span>(cell);<br>        &#125;<br><br>        public <span class="hljs-title class_">Vertex</span> <span class="hljs-title function_">setConnection</span>(<span class="hljs-params">Vertex... vertices</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">vertices</span> = vertices;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>terms and conditions</title>
    <link href="/2022/11/09/footer/terms/"/>
    <url>/2022/11/09/footer/terms/</url>
    
    <content type="html"><![CDATA[<h3 id="Terms-and-Conditions"><a href="#Terms-and-Conditions" class="headerlink" title="Terms and Conditions"></a>Terms and Conditions</h3><p>Last updated: April 17, 2019</p><p>These Terms and Conditions (“Terms”, “Terms and Conditions”) govern your relationship with <a href="https://java-springboot-kafka.github.io/">https://java-springboot-kafka.github.io</a> website (the “Service”) operated by <strong>Mehrdad Karami</strong> (“us”, “we”, or “our”).</p><p>Please read these Terms and Conditions carefully before using the Service.</p><p>Your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms. These Terms apply to all visitors, users and others who access or use the Service.</p><p>By accessing or using the Service you agree to be bound by these Terms. If you disagree with any part of the terms then you may not access the Service.</p><h4 id="Purchases"><a href="#Purchases" class="headerlink" title="Purchases"></a>Purchases</h4><p>If you wish to purchase any product or service made available through the Service (“Purchase”), you may be asked to supply certain information relevant to your Purchase including, without limitation, your credit card number, the expiration date of your credit card, your billing address, and your shipping information.</p><p>You represent and warrant that: (i) you have the legal right to use any credit card(s) or other payment method(s) in connection with any Purchase; and that (ii) the information you supply to us is true, correct and complete.</p><p>By submitting such information, you grant us the right to provide the information to third parties for purposes of facilitating the completion of Purchases.</p><p>We reserve the right to refuse or cancel your order at any time for certain reasons including but not limited to: product or service availability, errors in the description or price of the product or service, error in your order or other reasons.</p><p>We reserve the right to refuse or cancel your order if fraud or an unauthorised or illegal transaction is suspected.</p><p>Rights to all purchased ebooks are governed by the eBook license.</p><p>Additional Purchases Terms and Conditions<br>G2A.COM Limited<br>When you use G2A Pay services provided by G2A.COM Limited (hereinafter referred to as the “G2A Pay services provider”) to make a purchase on our website, responsibility over your purchase will first be transferred to G2A.COM Limited before it is delivered to you. G2A.COM is becoming Merchant of Record over your purchase. G2A Pay services provider assumes primary responsibility, with our assistance, for payment and payment related customer support. The terms between G2A Pay services provider and customers who utilize services of G2A Pay are governed by separate agreements which can be found under the link <a href="https://pay.g2a.com/terms-and-conditions">https://pay.g2a.com/terms-and-conditions</a> and are not subject to the Terms on this website.</p><p>In order to proceed the payment transaction, you temporary entrusts the G2A.COM with subject of the transaction, and G2A.COM takes responsibility for the product and for the transaction processing.</p><p>With respect to customers making purchases through G2A Pay services provider checkout, (i) the Privacy Policy of G2A Pay services provider shall apply to all payments and should be reviewed before making any purchase, and (ii) the G2A Pay services provider Refund Policy shall apply to all payments unless notice is expressly provided by the relevant supplier to buyers in advance. In addition the purchase of certain products may also require shoppers to agree to one or more End-User License Agreements (or “”EULAs””) that may include additional terms set by the product supplier rather than by Us or G2A Pay services provider. You will be bound by any EULA that you agree to.</p><p>You are responsible for any fees, taxes or other costs associated with the purchase and delivery of your items resulting from charges imposed by your relationship with payment services providers or the duties and taxes imposed by your local customs officials or other regulatory body.</p><p>For customer service inquiries or disputes, You may contact us by email at <a href="mailto:&#x73;&#117;&#112;&#x70;&#111;&#114;&#x74;&#x40;&#x6f;&#x6e;&#x6c;&#105;&#110;&#x65;&#106;&#97;&#118;&#x61;&#99;&#108;&#97;&#x73;&#115;&#x2e;&#x63;&#x6f;&#109;">&#x73;&#117;&#112;&#x70;&#111;&#114;&#x74;&#x40;&#x6f;&#x6e;&#x6c;&#105;&#110;&#x65;&#106;&#97;&#118;&#x61;&#99;&#108;&#97;&#x73;&#115;&#x2e;&#x63;&#x6f;&#109;</a>. Questions related to payments made through G2A Pay services provider payment should be addressed to <a href="mailto:&#x70;&#x61;&#121;&#109;&#101;&#110;&#x74;&#x69;&#115;&#115;&#x75;&#101;&#64;&#x67;&#50;&#x61;&#46;&#x63;&#111;&#109;">&#x70;&#x61;&#121;&#109;&#101;&#110;&#x74;&#x69;&#115;&#115;&#x75;&#101;&#64;&#x67;&#50;&#x61;&#46;&#x63;&#111;&#109;</a>. Where possible, we will work with you and&#x2F;or any user selling on our website, to resolve any disputes arising from your purchase.</p><p>Availability, Errors and Inaccuracies<br>We are constantly updating our offerings of products and services on the Service. The products or services available on our Service may be mispriced, described inaccurately, or unavailable, and we may experience delays in updating information on the Service and in our advertising on other web sites.</p><p>We cannot and do not guarantee the accuracy or completeness of any information, including prices, product images, specifications, availability, and services. We reserve the right to change or update information and to correct errors, inaccuracies, or omissions at any time without prior notice.</p><p>Contests, Sweepstakes and Promotions<br>Any contests, sweepstakes or other promotions (collectively, “Promotions”) made available through the Service may be governed by rules that are separate from these Terms. If you participate in any Promotions, please review the applicable rules as well as our Privacy Policy. If the rules for a Promotion conflict with these Terms, the Promotion rules will apply.</p><h4 id="Accounts"><a href="#Accounts" class="headerlink" title="Accounts"></a>Accounts</h4><p>When you create an account with us, you must provide us information that is accurate, complete, and current at all times. Failure to do so constitutes a breach of the Terms, which may result in immediate termination of your account on our Service.</p><p>You are responsible for safeguarding the password that you use to access the Service and for any activities or actions under your password, whether your password is with our Service or a third-party service.</p><p>You agree not to disclose your password to any third party. You must notify us immediately upon becoming aware of any breach of security or unauthorized use of your account.</p><h4 id="Copyright-Policy"><a href="#Copyright-Policy" class="headerlink" title="Copyright Policy"></a>Copyright Policy</h4><p>We respect the intellectual property rights of others. It is our policy to respond to any claim that Content posted on the Service infringes the copyright or other intellectual property infringement (“Infringement”) of any person.</p><p>If you are a copyright owner, or authorized on behalf of one, and you believe that the copyrighted work has been copied in a way that constitutes copyright infringement that is taking place through the Service, you must submit your notice in writing to the attention of “Copyright Infringement” of <a href="mailto:&#100;&#109;&#99;&#97;&#64;&#x6f;&#110;&#x6c;&#105;&#110;&#101;&#106;&#97;&#x76;&#x61;&#99;&#108;&#x61;&#x73;&#x73;&#x2e;&#99;&#111;&#x6d;">&#100;&#109;&#99;&#97;&#64;&#x6f;&#110;&#x6c;&#105;&#110;&#101;&#106;&#97;&#x76;&#x61;&#99;&#108;&#x61;&#x73;&#x73;&#x2e;&#99;&#111;&#x6d;</a> and include in your notice a detailed description of the alleged Infringement.</p><p>You may be held accountable for damages (including costs and attorneys’ fees) for misrepresenting that any Content is infringing your copyright.</p><h4 id="Links-To-Other-Web-Sites"><a href="#Links-To-Other-Web-Sites" class="headerlink" title="Links To Other Web Sites"></a>Links To Other Web Sites</h4><p>Our Service may contain links to third-party web sites or services that are not owned or controlled by onlinejavaclass.com.</p><p>onlinejavaclass.com has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that onlinejavaclass.com shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such web sites or services.</p><p>We strongly advise you to read the terms and conditions and privacy policies of any third-party web sites or services that you visit.</p><h4 id="Termination"><a href="#Termination" class="headerlink" title="Termination"></a>Termination</h4><p>We may terminate or suspend your account immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach the Terms.</p><p>Upon termination, your right to use the Service will immediately cease. If you wish to terminate your account, you may simply discontinue using the Service.</p><h4 id="Limitation-Of-Liability"><a href="#Limitation-Of-Liability" class="headerlink" title="Limitation Of Liability"></a>Limitation Of Liability</h4><p>In no event shall onlinejavaclass.com, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your access to or use of or inability to access or use the Service; (ii) any conduct or content of any third party on the Service; (iii) any content obtained from the Service; and (iv) unauthorized access, use or alteration of your transmissions or content, whether based on warranty, contract, tort (including negligence) or any other legal theory, whether or not we have been informed of the possibility of such damage, and even if a remedy set forth herein is found to have failed of its essential purpose.</p><h4 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h4><p>Your use of the Service is at your sole risk. The Service is provided on an “AS IS” and “AS AVAILABLE” basis. The Service is provided without warranties of any kind, whether express or implied, including, but not limited to, implied warranties of merchantability, fitness for a particular purpose, non-infringement or course of performance.</p><p>onlinejavaclass.com, its subsidiaries, affiliates, and its licensors do not warrant that a) the Service will function uninterrupted, secure or available at any particular time or location; b) any errors or defects will be corrected; c) the Service is free of viruses or other harmful components; or d) the results of using the Service will meet your requirements.</p><h4 id="Governing-Law"><a href="#Governing-Law" class="headerlink" title="Governing Law"></a>Governing Law</h4><p>These Terms shall be governed and construed in accordance with the laws of Germany, without regard to its conflict of law provisions.</p><p>Our failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and supersede and replace any prior agreements we might have between us regarding the Service.</p><h4 id="Changes"><a href="#Changes" class="headerlink" title="Changes"></a>Changes</h4><p>We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material we will try to provide at least 30 days notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion.</p><p>By continuing to access or use our Service after those revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, please stop using the Service.</p><h4 id="Contact-Us"><a href="#Contact-Us" class="headerlink" title="Contact Us"></a>Contact Us</h4><p>If you have any questions about these Terms, please contact us:</p><p>By email: <a href="mailto:&#99;&#x6f;&#x6e;&#x74;&#97;&#x63;&#x74;&#64;&#111;&#110;&#108;&#105;&#x6e;&#101;&#x6a;&#x61;&#x76;&#97;&#99;&#x6c;&#97;&#x73;&#115;&#x2e;&#99;&#111;&#x6d;">&#99;&#x6f;&#x6e;&#x74;&#97;&#x63;&#x74;&#64;&#111;&#110;&#108;&#105;&#x6e;&#101;&#x6a;&#x61;&#x76;&#97;&#99;&#x6c;&#97;&#x73;&#115;&#x2e;&#99;&#111;&#x6d;</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>privacy policy</title>
    <link href="/2022/11/09/footer/privacy/"/>
    <url>/2022/11/09/footer/privacy/</url>
    
    <content type="html"><![CDATA[<h3 id="Privacy-Policy"><a href="#Privacy-Policy" class="headerlink" title="Privacy Policy"></a>Privacy Policy</h3><p><strong>Mehrdad Karami</strong> (“us”, “we”, or “our”) operates the <a href="https://java-springboot-kafka.github.io/">https://java-springboot-kafka.github.io</a> website (hereinafter referred to as the “Service”).</p><p>This page informs you of our policies regarding the collection, use and disclosure of personal data when you use our Service and the choices you have associated with that data.</p><p>We use your data to provide and improve the Service. By using the Service, you agree to the collection and use of information in accordance with this policy.</p><h4 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h4><p>Service: Service is the <a href="https://java-springboot-kafka.github.io/">https://java-springboot-kafka.github.io</a> website operated by <strong>Mehrdad Karami</strong>.<br>Personal Data: Personal Data means data about a living individual who can be identified from those data (or from those and other information either in our possession or likely to come into our possession).<br>Usage Data: Usage Data is data collected automatically either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).<br>Cookies: Cookies are small files stored on your device (computer or mobile device).<br>Data Controller: Data Controller means the natural or legal person who (either alone or jointly or in common with other persons) determines the purposes for which and the manner in which any personal information are, or are to be, processed.</p><p>For the purpose of this Privacy Policy, we are a Data Controller of your Personal Data.</p><p>Data Processors (or Service Providers): Data Processor (or Service Provider) means any natural or legal person who processes the data on behalf of the Data Controller.</p><p>We may use the services of various Service Providers in order to process your data more effectively.</p><p>Data Subject (or User): Data Subject is any living individual who is using our Service and is the subject of Personal Data.<br>Information Collection and Use<br>We collect several different types of information for various purposes to provide and improve our Service to you.</p><p>Types of Data Collected<br>Personal Data<br>While using our Service, we may ask you to provide us with certain personally identifiable information that can be used to contact or identify you (“Personal Data”). Personally identifiable information may include, but is not limited to:</p><p>Name<br>Email address<br>Cookies and Usage Data<br>We may use your Personal Data to contact you with newsletters, marketing or promotional materials and other information that may be of interest to you. You may opt out of receiving any, or all, of these communications from us by following the unsubscribe link or the instructions provided in any email we send.</p><h4 id="Usage-Data"><a href="#Usage-Data" class="headerlink" title="Usage Data"></a>Usage Data</h4><p>We may also collect information on how the Service is accessed and used (“Usage Data”). This Usage Data may include information such as your computer’s Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that you visit, the time and date of your visit, the time spent on those pages, unique device identifiers and other diagnostic data.</p><p>Tracking &amp; Cookies Data<br>We use cookies and similar tracking technologies to track the activity on our Service and we hold certain information.</p><p>Cookies are files with a small amount of data which may include an anonymous unique identifier. Cookies are sent to your browser from a website and stored on your device. Other tracking technologies are also used such as beacons, tags and scripts to collect and track information and to improve and analyse our Service.</p><p>You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Service.</p><h4 id="Examples-of-Cookies-we-use"><a href="#Examples-of-Cookies-we-use" class="headerlink" title="Examples of Cookies we use:"></a>Examples of Cookies we use:</h4><p>Session Cookies. We use Session Cookies to operate our Service.<br>Preference Cookies. We use Preference Cookies to remember your preferences and various settings.<br>Security Cookies. We use Security Cookies for security purposes.<br>Advertising Cookies. Advertising Cookies are used to serve you with advertisements that may be relevant to you and your interests.</p><h4 id="Use-of-Data"><a href="#Use-of-Data" class="headerlink" title="Use of Data"></a>Use of Data</h4><p>reflectoring uses the collected data for various purposes:</p><p>To provide and maintain our Service<br>To notify you about changes to our Service<br>To allow you to participate in interactive features of our Service when you choose to do so<br>To provide customer support<br>To gather analysis or valuable information so that we can improve our Service<br>To monitor the usage of our Service<br>To detect, prevent and address technical issues<br>To provide you with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless you have opted not to receive such information<br>Legal Basis for Processing Personal Data under the General Data Protection Regulation (GDPR)<br>If you are from the European Economic Area (EEA), reflectoring legal basis for collecting and using the personal information described in this Privacy Policy depends on the Personal Data we collect and the specific context in which we collect it.</p><p>reflectoring may process your Personal Data because:</p><p>We need to perform a contract with you<br>You have given us permission to do so<br>The processing is in our legitimate interests and it is not overridden by your rights<br>For payment processing purposes<br>To comply with the law</p><h4 id="Retention-of-Data"><a href="#Retention-of-Data" class="headerlink" title="Retention of Data"></a>Retention of Data</h4><p>reflectoring will retain your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes and enforce our legal agreements and policies.</p><p>reflectoring will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of our Service, or we are legally obligated to retain this data for longer periods.</p><h4 id="Transfer-of-Data"><a href="#Transfer-of-Data" class="headerlink" title="Transfer of Data"></a>Transfer of Data</h4><p>Your information, including Personal Data, may be transferred to — and maintained on — computers located outside of your state, province, country or other governmental jurisdiction where the data protection laws may differ from those of your jurisdiction.</p><p>Your consent to this Privacy Policy followed by your submission of such information represents your agreement to that transfer.</p><p>reflectoring will take all the steps reasonably necessary to ensure that your data is treated securely and in accordance with this Privacy Policy and no transfer of your Personal Data will take place to an organisation or a country unless there are adequate controls in place including the security of your data and other personal information.</p><h4 id="Disclosure-of-Data"><a href="#Disclosure-of-Data" class="headerlink" title="Disclosure of Data"></a>Disclosure of Data</h4><p>Business Transaction<br>If reflectoring is involved in a merger, acquisition or asset sale, your Personal Data may be transferred. We will provide notice before your Personal Data is transferred and becomes subject to a different Privacy Policy.</p><h4 id="Disclosure-for-Law-Enforcement"><a href="#Disclosure-for-Law-Enforcement" class="headerlink" title="Disclosure for Law Enforcement"></a>Disclosure for Law Enforcement</h4><p>Under certain circumstances, reflectoring may be required to disclose your Personal Data if required to do so by law or in response to valid requests by public authorities (e.g. a court or a government agency).</p><h4 id="Legal-Requirements"><a href="#Legal-Requirements" class="headerlink" title="Legal Requirements"></a>Legal Requirements</h4><p>reflectoring may disclose your Personal Data in the good faith belief that such action is necessary to:</p><p>To comply with a legal obligation<br>To protect and defend the rights or property of reflectoring<br>To prevent or investigate possible wrongdoing in connection with the Service<br>To protect the personal safety of users of the Service or the public<br>To protect against legal liability</p><h4 id="Security-of-Data"><a href="#Security-of-Data" class="headerlink" title="Security of Data"></a>Security of Data</h4><p>The security of your data is important to us but remember that no method of transmission over the Internet or method of electronic storage is 100% secure. While we strive to use commercially acceptable means to protect your Personal Data, we cannot guarantee its absolute security.</p><p>Your Data Protection Rights under the General Data Protection Regulation (GDPR)<br>If you are a resident of the European Economic Area (EEA), you have certain data protection rights. reflectoring aims to take reasonable steps to allow you to correct, amend, delete or limit the use of your Personal Data.</p><p>If you wish to be informed about what Personal Data we hold about you and if you want it to be removed from our systems, please contact us.</p><p>In certain circumstances, you have the following data protection rights:</p><p>The right to access, update or delete the information we have on you. Whenever made possible, you can access, update or request deletion of your Personal Data directly within your account settings section. If you are unable to perform these actions yourself, please contact us to assist you.</p><p>The right of rectification. You have the right to have your information rectified if that information is inaccurate or incomplete.</p><p>The right to object. You have the right to object to our processing of your Personal Data.</p><p>The right of restriction. You have the right to request that we restrict the processing of your personal information.</p><p>The right to data portability. You have the right to be provided with a copy of the information we have on you in a structured, machine-readable and commonly used format.</p><p>The right to withdraw consent. You also have the right to withdraw your consent at any time where reflectoring relied on your consent to process your personal information.</p><p>Please note that we may ask you to verify your identity before responding to such requests.</p><p>You have the right to complain to a Data Protection Authority about our collection and use of your Personal Data. For more information, please contact your local data protection authority in the European Economic Area (EEA).</p><h4 id="Service-Providers"><a href="#Service-Providers" class="headerlink" title="Service Providers"></a>Service Providers</h4><p>We may employ third party companies and individuals to facilitate our Service (“Service Providers”), provide the Service on our behalf, perform Service-related services or assist us in analysing how our Service is used.</p><p>These third parties have access to your Personal Data only to perform these tasks on our behalf and are obligated not to disclose or use it for any other purpose.</p><h4 id="MailerLite"><a href="#MailerLite" class="headerlink" title="MailerLite"></a>MailerLite</h4><p>reflectoring uses MailerLite as its email service provider.</p><p>MailerLite collects contact information, distributes emails, and tracks actions you take that assist us in measuring the performance of the website and emails. Upon subscription, MailerLite also tracks the pages you visit on the website.</p><p>Our emails may contain tracking pixels. This pixel is embedded in emails and allows us to analyze the success of our emails. Because of these tracking pixels, we may see if and when you open an email and which links within the email you click.</p><p>This behavior is not passed to third parties. All data submitted at the time of subscription to our emails is stored on MailerLite’s servers. You may access MailerLite’s privacy policy here.</p><p>At any time, you may be removed from our newsletter list by clicking on the unsubscribe button provided in each email.</p><h4 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h4><p>We may use third-party Service Providers to monitor and analyse the use of our Service.</p><h4 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h4><p>Google Analytics is a web analytics service offered by Google that tracks and reports website traffic. Google uses the data collected to track and monitor the use of our Service. This data is shared with other Google services. Google may use the collected data to contextualise and personalise the ads of its own advertising network.</p><p>You can opt-out of having made your activity on the Service available to Google Analytics by installing the Google Analytics opt-out browser add-on. The add-on prevents the Google Analytics JavaScript (ga.js, analytics.js and dc.js) from sharing information with Google Analytics about visits activity.</p><p>For more information on the privacy practices of Google, please visit the Google Privacy &amp; Terms web page.</p><h4 id="Advertising"><a href="#Advertising" class="headerlink" title="Advertising"></a>Advertising</h4><p>We may use third-party Service Providers to show advertisements to you to help support and maintain our Service.</p><h4 id="Google-AdSense-amp-DoubleClick-Cookie"><a href="#Google-AdSense-amp-DoubleClick-Cookie" class="headerlink" title="Google AdSense &amp; DoubleClick Cookie"></a>Google AdSense &amp; DoubleClick Cookie</h4><p>Google, as a third party vendor, uses cookies to serve ads on our Service. Google’s use of the DoubleClick cookie enables it and its partners to serve ads to our users based on their visit to our Service or other websites on the Internet.</p><p>You may opt out of the use of the DoubleClick Cookie for interest-based advertising by visiting the Google Ads Settings web page.</p><h4 id="Payments"><a href="#Payments" class="headerlink" title="Payments"></a>Payments</h4><p>We may provide paid products and&#x2F;or services within the Service. In that case, we use third-party services for payment processing (e.g. payment processors).</p><p>We will not store or collect your payment card details. That information is provided directly to our third-party payment processors whose use of your personal information is governed by their Privacy Policy. These payment processors adhere to the standards set by PCI-DSS as managed by the PCI Security Standards Council, which is a joint effort of brands like Visa, MasterCard, American Express and Discover. PCI-DSS requirements help ensure the secure handling of payment information.</p><p>The payment processor we work with is PayPal. Their Privacy Policy can be viewed here.</p><h4 id="Links-to-Other-Sites"><a href="#Links-to-Other-Sites" class="headerlink" title="Links to Other Sites"></a>Links to Other Sites</h4><p>Our Service may contain links to other sites that are not operated by us. If you click a third party link, you will be directed to that third party’s site. We strongly advise you to review the Privacy Policy of every site you visit.</p><p>We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.</p><h4 id="Children’s-Privacy"><a href="#Children’s-Privacy" class="headerlink" title="Children’s Privacy"></a>Children’s Privacy</h4><p>Our Service does not address anyone under the age of 18 (“Children”).</p><p>We do not knowingly collect personally identifiable information from anyone under the age of 18. If you are a parent or guardian and you are aware that your Child has provided us with Personal Data, please contact us. If we become aware that we have collected Personal Data from children without verification of parental consent, we take steps to remove that information from our servers.</p><h4 id="Changes-to-This-Privacy-Policy"><a href="#Changes-to-This-Privacy-Policy" class="headerlink" title="Changes to This Privacy Policy"></a>Changes to This Privacy Policy</h4><p>We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.</p><p>We will let you know via email and&#x2F;or a prominent notice on our Service, prior to the change becoming effective and update the “effective date” at the top of this Privacy Policy.</p><p>You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.</p><h4 id="Contact-Us"><a href="#Contact-Us" class="headerlink" title="Contact Us"></a>Contact Us</h4><p>If you have any questions about this Privacy Policy, please contact us at <a href="mailto:&#x63;&#111;&#x6e;&#x74;&#97;&#99;&#116;&#x40;&#111;&#110;&#x6c;&#105;&#110;&#x65;&#x6a;&#x61;&#118;&#97;&#99;&#108;&#x61;&#x73;&#115;&#46;&#99;&#x6f;&#x6d;">&#x63;&#111;&#x6e;&#x74;&#97;&#99;&#116;&#x40;&#111;&#110;&#x6c;&#105;&#110;&#x65;&#x6a;&#x61;&#118;&#97;&#99;&#108;&#x61;&#x73;&#115;&#46;&#99;&#x6f;&#x6d;</a>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Guide to S.O.L.I.D Principles</title>
    <link href="/2022/11/09/solid/"/>
    <url>/2022/11/09/solid/</url>
    
    <content type="html"><![CDATA[<h4 id="The-following-5-concepts-make-up-our-SOLID-principles"><a href="#The-following-5-concepts-make-up-our-SOLID-principles" class="headerlink" title="The following 5 concepts make up our SOLID principles:"></a>The following 5 concepts make up our SOLID principles:</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> Single Responsibility<br><span class="hljs-bullet">2.</span> Open/Closed<br><span class="hljs-bullet">3.</span> Liskov Substitution<br><span class="hljs-bullet">4.</span> Interface Segregation<br><span class="hljs-bullet">5.</span> Dependency Inversion<br></code></pre></td></tr></table></figure><h4 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h4><p>In this tutorial, we’ll be discussing the SOLID principles of Object-Oriented Design.</p><p>First, we’ll start by exploring the reasons they came about and why we should consider them when designing software.<br>Then, we’ll outline each principle alongside some example code to emphasize the point.</p><p>I specially want to , since this is a principle for designing a good high quality software.<br>You may encounter with this principle before or even wrote codes solidly! But one may wonder what are those other principles to observe and have pretty good software design. Specially I want to discuss this in Java and how we do those pricipals.</p><h4 id="2-The-Reason-for-SOLID-Principles"><a href="#2-The-Reason-for-SOLID-Principles" class="headerlink" title="2. The Reason for SOLID Principles"></a>2. The Reason for SOLID Principles</h4><p>The SOLID principles were first conceptualized by Robert C. Martin in his 2000 paper, Design Principles and Design Patterns.<br>These concepts were later built upon by Michael Feathers, who introduced us to the SOLID acronym and in the last 20 years, these 5 principles have revolutionized the world of object-oriented programming, changing the way that we write software.</p><p>So, what is SOLID and how does it help us write better code? Simply put</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">design principles encourage us <span class="hljs-built_in">to</span> <span class="hljs-built_in">create</span> more maintainable, understandable, <span class="hljs-keyword">and</span> flexible software. <br>Consequently, <span class="hljs-keyword">as</span> our applications grow <span class="hljs-keyword">in</span> size, we can reduce their complexity <span class="hljs-keyword">and</span> save ourselves <span class="hljs-keyword">a</span> lot <span class="hljs-keyword">of</span> headaches further down <span class="hljs-keyword">the</span> road!<br></code></pre></td></tr></table></figure><p>The following 5 concepts make up our SOLID principles:</p><ol><li><em><strong>S</strong></em>ingle Responsibility</li><li><em><strong>O</strong></em>pen&#x2F;Closed</li><li><em><strong>L</strong></em>iskov Substitution</li><li><em><strong>I</strong></em>nterface Segregation</li><li><em><strong>D</strong></em>ependency Inversion</li></ol><p>While some of these words may sound scary!, they can be easily understood with some simple code examples.<br>In the following sections, I’ll take a deep dive into what each of these principles means, along with a quick Java example to illustrate each one.</p><h4 id="3-Single-Responsibility"><a href="#3-Single-Responsibility" class="headerlink" title="3. Single Responsibility"></a>3. Single Responsibility</h4><p>Let’s kick things off with the single responsibility principle. As we might expect, this principle states that <em><strong>a class should only have one responsibility. Furthermore, it should only have one reason to change.</strong></em></p><p>How does this principle help us to build better software? Let’s see a few of its benefits:</p><ol><li><em><strong>Testing</strong></em> – A class with one responsibility will have far fewer test cases</li><li><em><strong>Lower coupling</strong></em> – Less functionality in a single class will have fewer dependencies</li><li><em><strong>Organization</strong></em> – Smaller, well-organized classes are easier to search than monolithic ones</li></ol><p>Take, for example, a class to represent a simple book:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> String text;<br> <br>    <span class="hljs-comment">//constructor, getters and setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p>In this code, we store the name, author, and text associated with an instance of a Book.</p><p>Let’s now add a couple of methods to query the text:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> String text;<br> <br>    <span class="hljs-comment">//constructor, getters and setters</span><br> <br>    <span class="hljs-comment">// methods that directly relate to the book properties</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">replaceWordInText</span><span class="hljs-params">(String word)</span>&#123;<br>        <span class="hljs-keyword">return</span> text.replaceAll(word, text);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWordInText</span><span class="hljs-params">(String word)</span>&#123;<br>        <span class="hljs-keyword">return</span> text.contains(word);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Now, our Book class works well, and we can store as many books as we like in our application. But, what good is storing the information if we can’t output the text to our console and read it?</p><p>Let’s throw caution to the wind and add a print method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-comment">//...</span><br> <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTextToConsole</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// our code for formatting and printing the text</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>This code does, however, violate the single responsibility principle we outlined earlier. To fix our mess, we should implement a separate class that is concerned only with printing our texts:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookPrinter</span> &#123;<br> <br>    <span class="hljs-comment">// methods for outputting text</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTextToConsole</span><span class="hljs-params">(String text)</span>&#123;<br>        <span class="hljs-comment">//our code for formatting and printing the text</span><br>    &#125;<br> <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTextToAnotherMedium</span><span class="hljs-params">(String text)</span>&#123;<br>        <span class="hljs-comment">// code for writing to any other location..</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Awesome. Not only have we developed a class that relieves the Book of its printing duties, but we can also leverage our BookPrinter class to send our text to other media.</p><p>Whether it’s email, logging, or anything else, we have a separate class dedicated to this one concern!</p><h4 id="4-Open-for-Extension-Closed-for-Modification"><a href="#4-Open-for-Extension-Closed-for-Modification" class="headerlink" title="4. Open for Extension, Closed for Modification"></a>4. Open for Extension, Closed for Modification</h4><p>Now, time for the ‘O’ – more formally known as the open-closed principle. Simply put, classes should be open for extension,<br>but closed for modification.<br>In doing so, we stop ourselves from modifying existing code and causing potential new bugs in an otherwise happy application.</p><p>Of course, the one exception to the rule is when fixing bugs in existing code.</p><p>Let’s explore the concept further with a quick code example. As part of a new project, imagine we’ve implemented a Guitar class.</p><p>It’s fully fledged and even has a volume knob:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Guitar</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> String make;<br>    <span class="hljs-keyword">private</span> String model;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> volume;<br> <br>    <span class="hljs-comment">//Constructors, getters &amp; setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p>We launch the application, and everyone loves it. However, after a few months, we decide the Guitar is a little bit boring and could do with an awesome flame pattern to make it look a bit more ‘rock and roll’.</p><p>At this point, it might be tempting to just open up the Guitar class and add a flame pattern – but who knows what errors that might throw up in our application.</p><p>Instead, let’s stick to the open-closed principle and simply extend our Guitar class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperCoolGuitarWithFlames</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Guitar</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> String flameColor;<br> <br>    <span class="hljs-comment">//constructor, getters + setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p>By extending the Guitar class we can be sure that our existing application won’t be affected.</p><h4 id="5-Liskov-Substitution-LSP"><a href="#5-Liskov-Substitution-LSP" class="headerlink" title="5. Liskov Substitution - LSP"></a>5. Liskov Substitution - LSP</h4><p>Next up on our list is Liskov substitution, which is arguably the most complex of the 5 principles. </p><p>Simply put, <em><strong>if class A is a subtype of class B, then we should be able to replace B with A without disrupting the behavior of our program.</strong></em></p><p>Let’s just jump straight to the code to help wrap our heads around this concept:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Vehicle</span> &#123;<br> <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOnEngine</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accelerate</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Above, we define a simple Vehicle interface with a couple of methods that all cars should be able to fulfill – turning on the engine, and accelerating forward.</p><p>Let’s implement our interface and provide some code for the methods:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Vehicle</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> Engine engine;<br> <br>    <span class="hljs-comment">//Constructors, getters + setters</span><br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOnEngine</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//turn on the engine!</span><br>        engine.on();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accelerate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//move forward!</span><br>        engine.powerOn(<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>As our code describes, we have an engine that we can turn on, and we can increase the power. But wait, its 2020 and we are now using bikes as a vehicle too! </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bike</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Vehicle</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOnEngine</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;I don&#x27;t have an engine!&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accelerate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//this acceleration is crazy!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>By throwing a bike without an engine into the mix, we are inherently changing the behavior of our program.<br>This is a blatant <em><strong>violation of Liskov substitution and is a bit harder to fix than our previous 2 principles.</strong></em></p><p>One possible solution would be to rework our model into interfaces that take into account the engine-less state of our Vehicle.</p><p>I would rewire them with another example to satisfy Mr. Liskov in <a target="_blank" href="#/lsp">this article</a> separately, make sure to check it out.</p><h4 id="6-Interface-Segregation"><a href="#6-Interface-Segregation" class="headerlink" title="6. Interface Segregation"></a>6. Interface Segregation</h4><p>The ‘I ‘ in SOLID stands for interface segregation, and it simply means that larger interfaces should be split into smaller ones.<br>It states that no client should be forced to depend on methods it does not use.<br>By doing so, we can ensure that implementing classes only need to be concerned about the methods that are of interest to them.</p><p>For this example, we’re going to try our hands as zookeepers. And more specifically, we’ll be working in the bear enclosure.</p><p>Let’s start with an interface that outlines our roles as a bear keeper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BearKeeper</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">washTheBear</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedTheBear</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">petTheBear</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>As avid zookeepers, we’re more than happy to wash and feed our beloved bears. However, we’re all too aware of the dangers of petting them.<br>Unfortunately, our interface is rather large, and we have no choice than to implement the code to pet the bear.</p><p>Let’s fix this by splitting our large interface into 3 separate ones:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BearCleaner</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">washTheBear</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BearFeeder</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedTheBear</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BearPetter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">petTheBear</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Now, thanks to interface segregation, we’re free to implement only the methods that matter to us:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BearCarer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BearCleaner</span>, BearFeeder &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">washTheBear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//I think we missed a spot...</span><br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feedTheBear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//Tuna Tuesdays...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>And finally, we can leave the dangerous stuff to the crazy people:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrazyPerson</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BearPetter</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">petTheBear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//Good luck with that!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-Dependency-Inversion"><a href="#7-Dependency-Inversion" class="headerlink" title="7. Dependency Inversion"></a>7. Dependency Inversion</h4><p><em><strong>The principle of Dependency Inversion refers to the decoupling of software modules.<br>This way, instead of high-level modules depending on low-level modules, both will depend on abstractions.</strong></em></p><p>To demonstrate this, let’s go old-school and bring to life a Windows 98 computer with code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Windows98Machine</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>But what good is a computer without a monitor and keyboard? Let’s add one of each to our constructor so that every Windows98Computer we instantiate comes pre-packed with a Monitor and a StandardKeyboard:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Windows98Machine</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StandardKeyboard keyboard;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Monitor monitor;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Windows98Machine</span><span class="hljs-params">()</span> &#123;<br>        monitor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monitor</span>();<br>        keyboard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardKeyboard</span>();<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>This code will work, and we’ll be able to use the <em><strong>StandardKeyboard</strong></em> and <em><strong>Monitor</strong></em> freely within our <em><strong>Windows98Computer</strong></em> class.<br>Problem solved? <em><strong>Not quite</strong></em>. By declaring the <em><strong>StandardKeyboard</strong></em> and <em><strong>Monitor</strong></em> with the new keyword, we’ve tightly coupled these 3 classes together.</p><p>Not only does this make our Windows98Computer hard to test, but we’ve also lost the ability to switch out our <em><strong>StandardKeyboard</strong></em><br>class with a different one should the need arise. And we’re stuck with our <em><strong>Monitor</strong></em> class, too.</p><p>Let’s decouple our machine from the <em><strong>StandardKeyboard</strong></em> by adding a more general <em><strong>Keyboard</strong></em> interface and using this in our class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Keyboard</span> &#123; &#125;<br></code></pre></td></tr></table></figure><p>And now by using <strong>Keyboard</strong> we can would allow <strong>Windows98Machine</strong> substitute any type of <strong>Keyboard</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Windows98Machine</span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Keyboard keyboard;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Monitor monitor;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Windows98Machine</span><span class="hljs-params">(Keyboard keyboard, Monitor monitor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.keyboard = keyboard;<br>        <span class="hljs-built_in">this</span>.monitor = monitor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Here, we’re using the dependency injection pattern here to facilitate adding the Keyboard dependency into the Windows98Machine class.</p><p>Let’s also modify our StandardKeyboard class to implement the Keyboard interface so that it’s suitable for injecting into the Windows98Machine class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StandardKeyboard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Keyboard</span> &#123; <br><br>&#125;<br></code></pre></td></tr></table></figure><p>Now our classes are decoupled and communicate through the Keyboard abstraction. If we want, we can easily switch out the type of keyboard in our machine with a different implementation of the interface. We can follow the same principle for the Monitor class.</p><p>Excellent! We’ve decoupled the dependencies and are free to test our Windows98Machine with whichever testing framework we choose.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about me</title>
    <link href="/2022/11/09/footer/about/"/>
    <url>/2022/11/09/footer/about/</url>
    
    <content type="html"><![CDATA[<p>I’m a software developer and data engineer focused on writing better codes.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dynamic Tests in JUnit5 | Advance Tests in JUnit 5</title>
    <link href="/2022/11/09/java8/"/>
    <url>/2022/11/09/java8/</url>
    
    <content type="html"><![CDATA[<h3 id="Dynamic-Tests-in-JUnit5-Advance-Tests-in-JUnit-5"><a href="#Dynamic-Tests-in-JUnit5-Advance-Tests-in-JUnit-5" class="headerlink" title="Dynamic Tests in JUnit5 | Advance Tests in JUnit 5"></a>Dynamic Tests in JUnit5 | Advance Tests in JUnit 5</h3><p>Probably you’ve worked with Juniper. Regularly we annotate @Test  over methods we want to specify as test methods.</p><p>These test cases are static in the sense that they are fully specified at compile time, and their behavior cannot be changed by anything happening at runtime. Assumptions provide a basic form of dynamic behavior but are intentionally rather limited in their expressiveness.</p><p>In addition to these standard tests a completely new kind of test programming model has been introduced in JUnit 5 Jupiter. This new kind of test is a dynamic test which is generated at runtime by a factory method that is annotated with @TestFactory.</p><p>A DynamicTest is a test case generated at runtime. It is composed of a display name and an Executable. Executable is a @FunctionalInterface which means that the implementations of dynamic tests can be provided as lambda expressions or method references.</p><p>For example, I want to test my shopping cart service works fine, when 20 requests for adding Items to card being sent, I want to verify that using all the requests processed for example items saved into database successfully ( test scenario1), then processed items are sent into Kafka topic (test scenario2).</p><h3 id="Example-processing-add-items-to-shopping-card-scenario"><a href="#Example-processing-add-items-to-shopping-card-scenario" class="headerlink" title="Example processing add items to shopping card scenario"></a>Example processing add items to shopping card scenario</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">shoppingCartService.addProductToShoppingCart(shoppingCart.getUserId(), shoppingCart.getAsin());<br>assertFalse(shoppingCartService.getProductsInCartByUserId(shoppingCart.getUserId()).isEmpty());<br>verify(shoppingCartRepository).save(shoppingCart);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
